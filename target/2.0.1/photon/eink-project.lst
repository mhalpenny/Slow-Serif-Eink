
/home/matthew/Developer/eink-project/target/2.0.1/photon/eink-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001844  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1860  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000e8  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a18cc  080a18cc  000218cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a18f4  080a18f4  000218f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010f6ec  00000000  00000000  000218f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013d5c  00000000  00000000  00130fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001e98  00000000  00000000  00144d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029e5f  00000000  00000000  00146bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002b307  00000000  00000000  00170a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b54db  00000000  00000000  0019bd3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017198  00000000  00000000  00251219  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004b70  00000000  00000000  002683b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004ccc  00000000  00000000  0026cf24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fac1 	bl	80a15b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fac9 	bl	80a15d0 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1864 	.word	0x080a1864
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000150 	.word	0x20000150
 80a0058:	20000150 	.word	0x20000150

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ffe7 	bl	80a1030 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a183c 	.word	0x080a183c
 80a0080:	080a185c 	.word	0x080a185c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b830 	b.w	80a00e8 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f84b 	bl	80a0124 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bf8f 	b.w	80a0fb4 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 ba45 	b.w	80a0524 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 ba43 	b.w	80a0524 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 ba49 	b.w	80a0534 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_Z16startupFunctionsv>:
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a00b2:	2101      	movs	r1, #1
 80a00b4:	4608      	mov	r0, r1
 80a00b6:	f000 b96f 	b.w	80a0398 <HAL_Feature_Set>

080a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00ba:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00bc:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00be:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00c0:	b17c      	cbz	r4, 80a00e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00c2:	6863      	ldr	r3, [r4, #4]
 80a00c4:	3b01      	subs	r3, #1
 80a00c6:	6063      	str	r3, [r4, #4]
 80a00c8:	b95b      	cbnz	r3, 80a00e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00ca:	6823      	ldr	r3, [r4, #0]
 80a00cc:	4620      	mov	r0, r4
 80a00ce:	689b      	ldr	r3, [r3, #8]
 80a00d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00d2:	68a3      	ldr	r3, [r4, #8]
 80a00d4:	3b01      	subs	r3, #1
 80a00d6:	60a3      	str	r3, [r4, #8]
 80a00d8:	b91b      	cbnz	r3, 80a00e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00da:	6823      	ldr	r3, [r4, #0]
 80a00dc:	4620      	mov	r0, r4
 80a00de:	68db      	ldr	r3, [r3, #12]
 80a00e0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00e2:	4628      	mov	r0, r5
 80a00e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00e8 <setup>:
 80a00e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a00ea:	4b0a      	ldr	r3, [pc, #40]	; (80a0114 <setup+0x2c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00ec:	4a0a      	ldr	r2, [pc, #40]	; (80a0118 <setup+0x30>)
 80a00ee:	781b      	ldrb	r3, [r3, #0]
 80a00f0:	490a      	ldr	r1, [pc, #40]	; (80a011c <setup+0x34>)
 80a00f2:	f88d 3000 	strb.w	r3, [sp]
 80a00f6:	a802      	add	r0, sp, #8
 80a00f8:	2300      	movs	r3, #0
 80a00fa:	f000 fdaf 	bl	80a0c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a00fe:	a803      	add	r0, sp, #12
 80a0100:	f7ff ffdb 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0104:	4b06      	ldr	r3, [pc, #24]	; (80a0120 <setup+0x38>)
 80a0106:	2103      	movs	r1, #3
 80a0108:	8818      	ldrh	r0, [r3, #0]
 80a010a:	f001 fa27 	bl	80a155c <pinMode>
 80a010e:	b005      	add	sp, #20
 80a0110:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0114:	20000070 	.word	0x20000070
 80a0118:	080a1684 	.word	0x080a1684
 80a011c:	080a168a 	.word	0x080a168a
 80a0120:	20000078 	.word	0x20000078

080a0124 <loop>:
 80a0124:	b570      	push	{r4, r5, r6, lr}
 80a0126:	2500      	movs	r5, #0
 80a0128:	4e21      	ldr	r6, [pc, #132]	; (80a01b0 <loop+0x8c>)
 80a012a:	b088      	sub	sp, #32
 80a012c:	7833      	ldrb	r3, [r6, #0]
 80a012e:	4c21      	ldr	r4, [pc, #132]	; (80a01b4 <loop+0x90>)
 80a0130:	4a21      	ldr	r2, [pc, #132]	; (80a01b8 <loop+0x94>)
 80a0132:	4922      	ldr	r1, [pc, #136]	; (80a01bc <loop+0x98>)
 80a0134:	f88d 3000 	strb.w	r3, [sp]
 80a0138:	a806      	add	r0, sp, #24
 80a013a:	233c      	movs	r3, #60	; 0x3c
 80a013c:	6025      	str	r5, [r4, #0]
 80a013e:	f000 fd8d 	bl	80a0c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0142:	a807      	add	r0, sp, #28
 80a0144:	f7ff ffb9 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0148:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a014c:	f000 ffb6 	bl	80a10bc <delay>
 80a0150:	6823      	ldr	r3, [r4, #0]
 80a0152:	491b      	ldr	r1, [pc, #108]	; (80a01c0 <loop+0x9c>)
 80a0154:	42ab      	cmp	r3, r5
 80a0156:	bf0c      	ite	eq
 80a0158:	2301      	moveq	r3, #1
 80a015a:	462b      	movne	r3, r5
 80a015c:	6023      	str	r3, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a015e:	7833      	ldrb	r3, [r6, #0]
 80a0160:	4a15      	ldr	r2, [pc, #84]	; (80a01b8 <loop+0x94>)
 80a0162:	f88d 3000 	strb.w	r3, [sp]
 80a0166:	bf08      	it	eq
 80a0168:	460a      	moveq	r2, r1
 80a016a:	233c      	movs	r3, #60	; 0x3c
 80a016c:	4913      	ldr	r1, [pc, #76]	; (80a01bc <loop+0x98>)
 80a016e:	a806      	add	r0, sp, #24
 80a0170:	f000 fd74 	bl	80a0c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0174:	a807      	add	r0, sp, #28
 80a0176:	f7ff ffa0 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a017a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a017e:	f000 ff9d 	bl	80a10bc <delay>
 80a0182:	4a10      	ldr	r2, [pc, #64]	; (80a01c4 <loop+0xa0>)
 80a0184:	4b10      	ldr	r3, [pc, #64]	; (80a01c8 <loop+0xa4>)
 80a0186:	8812      	ldrh	r2, [r2, #0]
 80a0188:	681b      	ldr	r3, [r3, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
 80a018a:	f8ad 2016 	strh.w	r2, [sp, #22]
 80a018e:	2202      	movs	r2, #2
 80a0190:	f88d 2015 	strb.w	r2, [sp, #21]
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 80a0194:	2201      	movs	r2, #1
 80a0196:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80a019a:	9200      	str	r2, [sp, #0]
 80a019c:	f10d 0315 	add.w	r3, sp, #21
 80a01a0:	f10d 0116 	add.w	r1, sp, #22
 80a01a4:	a806      	add	r0, sp, #24
 80a01a6:	f001 f8d5 	bl	80a1354 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
 80a01aa:	b008      	add	sp, #32
 80a01ac:	bd70      	pop	{r4, r5, r6, pc}
 80a01ae:	bf00      	nop
 80a01b0:	20000070 	.word	0x20000070
 80a01b4:	20000074 	.word	0x20000074
 80a01b8:	080a1693 	.word	0x080a1693
 80a01bc:	080a168a 	.word	0x080a168a
 80a01c0:	080a1690 	.word	0x080a1690
 80a01c4:	20000078 	.word	0x20000078
 80a01c8:	2000006c 	.word	0x2000006c

080a01cc <_GLOBAL__sub_I_firstAvailable>:
        val_(val) {
 80a01cc:	2300      	movs	r3, #0
 80a01ce:	4a03      	ldr	r2, [pc, #12]	; (80a01dc <_GLOBAL__sub_I_firstAvailable+0x10>)
 80a01d0:	6013      	str	r3, [r2, #0]
 80a01d2:	4a03      	ldr	r2, [pc, #12]	; (80a01e0 <_GLOBAL__sub_I_firstAvailable+0x14>)
 80a01d4:	7013      	strb	r3, [r2, #0]
 80a01d6:	f7ff bf6c 	b.w	80a00b2 <_Z16startupFunctionsv>
 80a01da:	bf00      	nop
 80a01dc:	2000006c 	.word	0x2000006c
 80a01e0:	20000070 	.word	0x20000070

080a01e4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a01e4:	b510      	push	{r4, lr}
 80a01e6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a01e8:	6880      	ldr	r0, [r0, #8]
 80a01ea:	b108      	cbz	r0, 80a01f0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a01ec:	f000 f8cc 	bl	80a0388 <os_mutex_recursive_destroy>
 80a01f0:	4620      	mov	r0, r4
 80a01f2:	bd10      	pop	{r4, pc}

080a01f4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <inet_gethostbyname+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	080601c0 	.word	0x080601c0

080a0204 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <HAL_USB_USART_Init+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	681b      	ldr	r3, [r3, #0]
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	080601d8 	.word	0x080601d8

080a0214 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <HAL_USB_USART_Available_Data+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	691b      	ldr	r3, [r3, #16]
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	080601d8 	.word	0x080601d8

080a0224 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	695b      	ldr	r3, [r3, #20]
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	080601d8 	.word	0x080601d8

080a0234 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <HAL_USB_USART_Receive_Data+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	699b      	ldr	r3, [r3, #24]
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601d8 	.word	0x080601d8

080a0244 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <HAL_USB_USART_Send_Data+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	69db      	ldr	r3, [r3, #28]
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601d8 	.word	0x080601d8

080a0254 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <HAL_USB_USART_Flush_Data+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	6a1b      	ldr	r3, [r3, #32]
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601d8 	.word	0x080601d8

080a0264 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <hal_i2c_write+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601ac 	.word	0x080601ac

080a0274 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <hal_i2c_available+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601ac 	.word	0x080601ac

080a0284 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <hal_i2c_read+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601ac 	.word	0x080601ac

080a0294 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <hal_i2c_peek+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601ac 	.word	0x080601ac

080a02a4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <hal_i2c_flush+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601ac 	.word	0x080601ac

080a02b4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <hal_i2c_is_enabled+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601ac 	.word	0x080601ac

080a02c4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b03      	ldr	r3, [pc, #12]	; (80a02d4 <hal_i2c_init+0x10>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a02ce:	9301      	str	r3, [sp, #4]
 80a02d0:	bd08      	pop	{r3, pc}
 80a02d2:	0000      	.short	0x0000
 80a02d4:	080601ac 	.word	0x080601ac

080a02d8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <hal_spi_init+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	69db      	ldr	r3, [r3, #28]
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601b4 	.word	0x080601b4

080a02e8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <hal_spi_is_enabled+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	6a1b      	ldr	r3, [r3, #32]
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601b4 	.word	0x080601b4

080a02f8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <hal_usart_init+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	699b      	ldr	r3, [r3, #24]
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601c4 	.word	0x080601c4

080a0308 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <hal_usart_write+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	080601c4 	.word	0x080601c4

080a0318 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <hal_usart_available+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601c4 	.word	0x080601c4

080a0328 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <hal_usart_read+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601c4 	.word	0x080601c4

080a0338 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <hal_usart_peek+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601c4 	.word	0x080601c4

080a0348 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <hal_usart_flush+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601c4 	.word	0x080601c4

080a0358 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <hal_usart_is_enabled+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601c4 	.word	0x080601c4

080a0368 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <hal_usart_available_data_for_write+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601c4 	.word	0x080601c4

080a0378 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <os_mutex_recursive_create+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601d0 	.word	0x080601d0

080a0388 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <os_mutex_recursive_destroy+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601d0 	.word	0x080601d0

080a0398 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_Feature_Set+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601b8 	.word	0x080601b8

080a03a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_RNG_GetRandomNumber+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	685b      	ldr	r3, [r3, #4]
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	0806019c 	.word	0x0806019c

080a03b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	695b      	ldr	r3, [r3, #20]
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	0806019c 	.word	0x0806019c

080a03c8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <HAL_Pin_Mode+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	689b      	ldr	r3, [r3, #8]
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601b0 	.word	0x080601b0

080a03d8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <spark_cloud_flag_connected+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	695b      	ldr	r3, [r3, #20]
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601cc 	.word	0x080601cc

080a03e8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <spark_send_event+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	6a1b      	ldr	r3, [r3, #32]
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601cc 	.word	0x080601cc

080a03f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601cc 	.word	0x080601cc

080a0408 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <network_connect+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	685b      	ldr	r3, [r3, #4]
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601c8 	.word	0x080601c8

080a0418 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0418:	b508      	push	{r3, lr}
 80a041a:	4b02      	ldr	r3, [pc, #8]	; (80a0424 <network_connecting+0xc>)
 80a041c:	681b      	ldr	r3, [r3, #0]
 80a041e:	689b      	ldr	r3, [r3, #8]
 80a0420:	9301      	str	r3, [sp, #4]
 80a0422:	bd08      	pop	{r3, pc}
 80a0424:	080601c8 	.word	0x080601c8

080a0428 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0428:	b508      	push	{r3, lr}
 80a042a:	4b02      	ldr	r3, [pc, #8]	; (80a0434 <network_disconnect+0xc>)
 80a042c:	681b      	ldr	r3, [r3, #0]
 80a042e:	68db      	ldr	r3, [r3, #12]
 80a0430:	9301      	str	r3, [sp, #4]
 80a0432:	bd08      	pop	{r3, pc}
 80a0434:	080601c8 	.word	0x080601c8

080a0438 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0438:	b508      	push	{r3, lr}
 80a043a:	4b02      	ldr	r3, [pc, #8]	; (80a0444 <network_ready+0xc>)
 80a043c:	681b      	ldr	r3, [r3, #0]
 80a043e:	691b      	ldr	r3, [r3, #16]
 80a0440:	9301      	str	r3, [sp, #4]
 80a0442:	bd08      	pop	{r3, pc}
 80a0444:	080601c8 	.word	0x080601c8

080a0448 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <network_on+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	695b      	ldr	r3, [r3, #20]
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601c8 	.word	0x080601c8

080a0458 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <network_off+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	699b      	ldr	r3, [r3, #24]
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601c8 	.word	0x080601c8

080a0468 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <network_listen+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	69db      	ldr	r3, [r3, #28]
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	080601c8 	.word	0x080601c8

080a0478 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <network_listening+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	6a1b      	ldr	r3, [r3, #32]
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601c8 	.word	0x080601c8

080a0488 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <network_set_listen_timeout+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601c8 	.word	0x080601c8

080a0498 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <network_get_listen_timeout+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601c8 	.word	0x080601c8

080a04a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <set_system_mode+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	685b      	ldr	r3, [r3, #4]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601a4 	.word	0x080601a4

080a04b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <system_delay_ms+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	695b      	ldr	r3, [r3, #20]
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601a4 	.word	0x080601a4

080a04c8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <application_thread_current+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601a4 	.word	0x080601a4

080a04d8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <application_thread_invoke+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601a4 	.word	0x080601a4

080a04e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b03      	ldr	r3, [pc, #12]	; (80a04f8 <system_ctrl_set_app_request_handler+0x10>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a04f2:	9301      	str	r3, [sp, #4]
 80a04f4:	bd08      	pop	{r3, pc}
 80a04f6:	0000      	.short	0x0000
 80a04f8:	080601a4 	.word	0x080601a4

080a04fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b03      	ldr	r3, [pc, #12]	; (80a050c <system_ctrl_set_result+0x10>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0506:	9301      	str	r3, [sp, #4]
 80a0508:	bd08      	pop	{r3, pc}
 80a050a:	0000      	.short	0x0000
 80a050c:	080601a4 	.word	0x080601a4

080a0510 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a0510:	b508      	push	{r3, lr}
 80a0512:	4b03      	ldr	r3, [pc, #12]	; (80a0520 <system_sleep_pins+0x10>)
 80a0514:	681b      	ldr	r3, [r3, #0]
 80a0516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a051a:	9301      	str	r3, [sp, #4]
 80a051c:	bd08      	pop	{r3, pc}
 80a051e:	0000      	.short	0x0000
 80a0520:	080601a4 	.word	0x080601a4

080a0524 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <malloc+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	681b      	ldr	r3, [r3, #0]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601a0 	.word	0x080601a0

080a0534 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <free+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	685b      	ldr	r3, [r3, #4]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601a0 	.word	0x080601a0

080a0544 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <abort+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601a0 	.word	0x080601a0

080a0554 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <_malloc_r+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601a0 	.word	0x080601a0

080a0564 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <newlib_impure_ptr_callback+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601a0 	.word	0x080601a0

080a0574 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0574:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0576:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0578:	4604      	mov	r4, r0
      if (_M_manager)
 80a057a:	b113      	cbz	r3, 80a0582 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a057c:	2203      	movs	r2, #3
 80a057e:	4601      	mov	r1, r0
 80a0580:	4798      	blx	r3
    }
 80a0582:	4620      	mov	r0, r4
 80a0584:	bd10      	pop	{r4, pc}

080a0586 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0586:	2300      	movs	r3, #0
 80a0588:	6840      	ldr	r0, [r0, #4]
 80a058a:	461a      	mov	r2, r3
 80a058c:	f7ff bf3c 	b.w	80a0408 <network_connect>

080a0590 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0590:	2200      	movs	r2, #0
 80a0592:	2102      	movs	r1, #2
 80a0594:	6840      	ldr	r0, [r0, #4]
 80a0596:	f7ff bf47 	b.w	80a0428 <network_disconnect>

080a059a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a059a:	2200      	movs	r2, #0
 80a059c:	6840      	ldr	r0, [r0, #4]
 80a059e:	4611      	mov	r1, r2
 80a05a0:	f7ff bf3a 	b.w	80a0418 <network_connecting>

080a05a4 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a05a4:	2200      	movs	r2, #0
 80a05a6:	6840      	ldr	r0, [r0, #4]
 80a05a8:	4611      	mov	r1, r2
 80a05aa:	f7ff bf45 	b.w	80a0438 <network_ready>

080a05ae <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a05ae:	2300      	movs	r3, #0
 80a05b0:	6840      	ldr	r0, [r0, #4]
 80a05b2:	461a      	mov	r2, r3
 80a05b4:	4619      	mov	r1, r3
 80a05b6:	f7ff bf47 	b.w	80a0448 <network_on>

080a05ba <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a05ba:	2300      	movs	r3, #0
 80a05bc:	6840      	ldr	r0, [r0, #4]
 80a05be:	461a      	mov	r2, r3
 80a05c0:	4619      	mov	r1, r3
 80a05c2:	f7ff bf49 	b.w	80a0458 <network_off>

080a05c6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a05c6:	2200      	movs	r2, #0
 80a05c8:	6840      	ldr	r0, [r0, #4]
 80a05ca:	f081 0101 	eor.w	r1, r1, #1
 80a05ce:	f7ff bf4b 	b.w	80a0468 <network_listen>

080a05d2 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a05d2:	2200      	movs	r2, #0
 80a05d4:	6840      	ldr	r0, [r0, #4]
 80a05d6:	f7ff bf57 	b.w	80a0488 <network_set_listen_timeout>

080a05da <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a05da:	2200      	movs	r2, #0
 80a05dc:	6840      	ldr	r0, [r0, #4]
 80a05de:	4611      	mov	r1, r2
 80a05e0:	f7ff bf5a 	b.w	80a0498 <network_get_listen_timeout>

080a05e4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a05e4:	2200      	movs	r2, #0
 80a05e6:	6840      	ldr	r0, [r0, #4]
 80a05e8:	4611      	mov	r1, r2
 80a05ea:	f7ff bf45 	b.w	80a0478 <network_listening>
	...

080a05f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a05f0:	b570      	push	{r4, r5, r6, lr}
 80a05f2:	4615      	mov	r5, r2
 80a05f4:	b08e      	sub	sp, #56	; 0x38
 80a05f6:	4604      	mov	r4, r0
    IPAddress addr;
 80a05f8:	a808      	add	r0, sp, #32
 80a05fa:	f000 f9af 	bl	80a095c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a05fe:	2211      	movs	r2, #17
 80a0600:	2100      	movs	r1, #0
 80a0602:	a803      	add	r0, sp, #12
 80a0604:	f000 ffe4 	bl	80a15d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0608:	2600      	movs	r6, #0
 80a060a:	4628      	mov	r0, r5
 80a060c:	f001 f827 	bl	80a165e <strlen>
 80a0610:	4b0a      	ldr	r3, [pc, #40]	; (80a063c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0612:	9600      	str	r6, [sp, #0]
 80a0614:	b281      	uxth	r1, r0
 80a0616:	685b      	ldr	r3, [r3, #4]
 80a0618:	4628      	mov	r0, r5
 80a061a:	aa03      	add	r2, sp, #12
 80a061c:	f7ff fdea 	bl	80a01f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0620:	b130      	cbz	r0, 80a0630 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0622:	4631      	mov	r1, r6
 80a0624:	4620      	mov	r0, r4
 80a0626:	f000 f9b9 	bl	80a099c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a062a:	4620      	mov	r0, r4
 80a062c:	b00e      	add	sp, #56	; 0x38
 80a062e:	bd70      	pop	{r4, r5, r6, pc}
 80a0630:	4620      	mov	r0, r4
 80a0632:	a903      	add	r1, sp, #12
 80a0634:	f000 f9a0 	bl	80a0978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0638:	e7f7      	b.n	80a062a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a063a:	bf00      	nop
 80a063c:	20000094 	.word	0x20000094

080a0640 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0640:	4b02      	ldr	r3, [pc, #8]	; (80a064c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0642:	4a03      	ldr	r2, [pc, #12]	; (80a0650 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0644:	601a      	str	r2, [r3, #0]
 80a0646:	2200      	movs	r2, #0
 80a0648:	605a      	str	r2, [r3, #4]

} // spark
 80a064a:	4770      	bx	lr
 80a064c:	2000008c 	.word	0x2000008c
 80a0650:	080a16a0 	.word	0x080a16a0

080a0654 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0654:	2200      	movs	r2, #0
 80a0656:	6840      	ldr	r0, [r0, #4]
 80a0658:	4611      	mov	r1, r2
 80a065a:	f7ff beed 	b.w	80a0438 <network_ready>

080a065e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a065e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0660:	4615      	mov	r5, r2
 80a0662:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a0664:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0666:	460e      	mov	r6, r1
 80a0668:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a066a:	2100      	movs	r1, #0
 80a066c:	a803      	add	r0, sp, #12
 80a066e:	f000 ffaf 	bl	80a15d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0672:	4628      	mov	r0, r5
 80a0674:	f000 fff3 	bl	80a165e <strlen>
 80a0678:	2700      	movs	r7, #0
 80a067a:	b281      	uxth	r1, r0
 80a067c:	6873      	ldr	r3, [r6, #4]
 80a067e:	4628      	mov	r0, r5
 80a0680:	9700      	str	r7, [sp, #0]
 80a0682:	aa03      	add	r2, sp, #12
 80a0684:	f7ff fdb6 	bl	80a01f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0688:	b130      	cbz	r0, 80a0698 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a068a:	4639      	mov	r1, r7
 80a068c:	4620      	mov	r0, r4
 80a068e:	f000 f985 	bl	80a099c <_ZN9IPAddressC1Em>
    }
 80a0692:	4620      	mov	r0, r4
 80a0694:	b009      	add	sp, #36	; 0x24
 80a0696:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0698:	4620      	mov	r0, r4
 80a069a:	a903      	add	r1, sp, #12
 80a069c:	f000 f96c 	bl	80a0978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a06a0:	e7f7      	b.n	80a0692 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a06a2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a06a2:	2200      	movs	r2, #0
 80a06a4:	6840      	ldr	r0, [r0, #4]
 80a06a6:	4611      	mov	r1, r2
 80a06a8:	f7ff bee6 	b.w	80a0478 <network_listening>

080a06ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a06ac:	2200      	movs	r2, #0
 80a06ae:	6840      	ldr	r0, [r0, #4]
 80a06b0:	4611      	mov	r1, r2
 80a06b2:	f7ff bef1 	b.w	80a0498 <network_get_listen_timeout>

080a06b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a06b6:	2200      	movs	r2, #0
 80a06b8:	6840      	ldr	r0, [r0, #4]
 80a06ba:	f7ff bee5 	b.w	80a0488 <network_set_listen_timeout>

080a06be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a06be:	2200      	movs	r2, #0
 80a06c0:	6840      	ldr	r0, [r0, #4]
 80a06c2:	f081 0101 	eor.w	r1, r1, #1
 80a06c6:	f7ff becf 	b.w	80a0468 <network_listen>

080a06ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a06ca:	2300      	movs	r3, #0
 80a06cc:	6840      	ldr	r0, [r0, #4]
 80a06ce:	461a      	mov	r2, r3
 80a06d0:	4619      	mov	r1, r3
 80a06d2:	f7ff bec1 	b.w	80a0458 <network_off>

080a06d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a06d6:	2300      	movs	r3, #0
 80a06d8:	6840      	ldr	r0, [r0, #4]
 80a06da:	461a      	mov	r2, r3
 80a06dc:	4619      	mov	r1, r3
 80a06de:	f7ff beb3 	b.w	80a0448 <network_on>

080a06e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a06e2:	2200      	movs	r2, #0
 80a06e4:	6840      	ldr	r0, [r0, #4]
 80a06e6:	4611      	mov	r1, r2
 80a06e8:	f7ff be96 	b.w	80a0418 <network_connecting>

080a06ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a06ec:	2200      	movs	r2, #0
 80a06ee:	2102      	movs	r1, #2
 80a06f0:	6840      	ldr	r0, [r0, #4]
 80a06f2:	f7ff be99 	b.w	80a0428 <network_disconnect>

080a06f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a06f6:	2300      	movs	r3, #0
 80a06f8:	6840      	ldr	r0, [r0, #4]
 80a06fa:	461a      	mov	r2, r3
 80a06fc:	f7ff be84 	b.w	80a0408 <network_connect>

080a0700 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0700:	2204      	movs	r2, #4
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0704:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0706:	4a02      	ldr	r2, [pc, #8]	; (80a0710 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0708:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a070a:	4770      	bx	lr
 80a070c:	20000094 	.word	0x20000094
 80a0710:	080a16d4 	.word	0x080a16d4

080a0714 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0714:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0716:	6883      	ldr	r3, [r0, #8]
 80a0718:	4604      	mov	r4, r0
 80a071a:	b90b      	cbnz	r3, 80a0720 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a071c:	f000 ff38 	bl	80a1590 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0720:	68c3      	ldr	r3, [r0, #12]
 80a0722:	4798      	blx	r3
      if (_M_manager)
 80a0724:	68a3      	ldr	r3, [r4, #8]
 80a0726:	b11b      	cbz	r3, 80a0730 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0728:	2203      	movs	r2, #3
 80a072a:	4621      	mov	r1, r4
 80a072c:	4620      	mov	r0, r4
 80a072e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0730:	4620      	mov	r0, r4
}
 80a0732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a0736:	2110      	movs	r1, #16
 80a0738:	f000 bf26 	b.w	80a1588 <_ZdlPvj>

080a073c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a073c:	4770      	bx	lr

080a073e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a073e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0740:	4606      	mov	r6, r0
 80a0742:	4615      	mov	r5, r2
 80a0744:	460c      	mov	r4, r1
 80a0746:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0748:	42bc      	cmp	r4, r7
 80a074a:	d006      	beq.n	80a075a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a074c:	6833      	ldr	r3, [r6, #0]
 80a074e:	4630      	mov	r0, r6
 80a0750:	689b      	ldr	r3, [r3, #8]
 80a0752:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0756:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0758:	e7f6      	b.n	80a0748 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a075a:	4628      	mov	r0, r5
 80a075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a075e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a075e:	2200      	movs	r2, #0
 80a0760:	7c00      	ldrb	r0, [r0, #16]
 80a0762:	f7ff bd7f 	b.w	80a0264 <hal_i2c_write>

080a0766 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0766:	2100      	movs	r1, #0
 80a0768:	7c00      	ldrb	r0, [r0, #16]
 80a076a:	f7ff bd83 	b.w	80a0274 <hal_i2c_available>

080a076e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a076e:	2100      	movs	r1, #0
 80a0770:	7c00      	ldrb	r0, [r0, #16]
 80a0772:	f7ff bd87 	b.w	80a0284 <hal_i2c_read>

080a0776 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0776:	2100      	movs	r1, #0
 80a0778:	7c00      	ldrb	r0, [r0, #16]
 80a077a:	f7ff bd8b 	b.w	80a0294 <hal_i2c_peek>

080a077e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a077e:	2100      	movs	r1, #0
 80a0780:	7c00      	ldrb	r0, [r0, #16]
 80a0782:	f7ff bd8f 	b.w	80a02a4 <hal_i2c_flush>

080a0786 <_ZN7TwoWireD0Ev>:
 80a0786:	b510      	push	{r4, lr}
 80a0788:	4604      	mov	r4, r0
 80a078a:	2114      	movs	r1, #20
 80a078c:	f000 fefc 	bl	80a1588 <_ZdlPvj>
 80a0790:	4620      	mov	r0, r4
 80a0792:	bd10      	pop	{r4, pc}

080a0794 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0794:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a079a:	4604      	mov	r4, r0
 80a079c:	4608      	mov	r0, r1
 80a079e:	2100      	movs	r1, #0
 80a07a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a07a4:	4b03      	ldr	r3, [pc, #12]	; (80a07b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a07a6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a07a8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a07aa:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a07ac:	f7ff fd8a 	bl	80a02c4 <hal_i2c_init>
}
 80a07b0:	4620      	mov	r0, r4
 80a07b2:	bd10      	pop	{r4, pc}
 80a07b4:	080a1708 	.word	0x080a1708

080a07b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a07b8:	7441      	strb	r1, [r0, #17]
}
 80a07ba:	4770      	bx	lr

080a07bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a07bc:	4770      	bx	lr

080a07be <_ZN9USBSerial4readEv>:
{
 80a07be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a07c0:	2100      	movs	r1, #0
 80a07c2:	7c00      	ldrb	r0, [r0, #16]
 80a07c4:	f7ff fd36 	bl	80a0234 <HAL_USB_USART_Receive_Data>
}
 80a07c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07cc:	bd08      	pop	{r3, pc}

080a07ce <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a07ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a07d0:	2101      	movs	r1, #1
 80a07d2:	7c00      	ldrb	r0, [r0, #16]
 80a07d4:	f7ff fd2e 	bl	80a0234 <HAL_USB_USART_Receive_Data>
}
 80a07d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07dc:	bd08      	pop	{r3, pc}

080a07de <_ZN9USBSerial17availableForWriteEv>:
{
 80a07de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a07e0:	7c00      	ldrb	r0, [r0, #16]
 80a07e2:	f7ff fd1f 	bl	80a0224 <HAL_USB_USART_Available_Data_For_Write>
}
 80a07e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07ea:	bd08      	pop	{r3, pc}

080a07ec <_ZN9USBSerial9availableEv>:
{
 80a07ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a07ee:	7c00      	ldrb	r0, [r0, #16]
 80a07f0:	f7ff fd10 	bl	80a0214 <HAL_USB_USART_Available_Data>
}
 80a07f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07f8:	bd08      	pop	{r3, pc}

080a07fa <_ZN9USBSerial5writeEh>:
{
 80a07fa:	b538      	push	{r3, r4, r5, lr}
 80a07fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a07fe:	7c00      	ldrb	r0, [r0, #16]
{
 80a0800:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0802:	f7ff fd0f 	bl	80a0224 <HAL_USB_USART_Available_Data_For_Write>
 80a0806:	2800      	cmp	r0, #0
 80a0808:	dc01      	bgt.n	80a080e <_ZN9USBSerial5writeEh+0x14>
 80a080a:	7c60      	ldrb	r0, [r4, #17]
 80a080c:	b128      	cbz	r0, 80a081a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a080e:	4629      	mov	r1, r5
 80a0810:	7c20      	ldrb	r0, [r4, #16]
 80a0812:	f7ff fd17 	bl	80a0244 <HAL_USB_USART_Send_Data>
 80a0816:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a081a:	bd38      	pop	{r3, r4, r5, pc}

080a081c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a081c:	7c00      	ldrb	r0, [r0, #16]
 80a081e:	f7ff bd19 	b.w	80a0254 <HAL_USB_USART_Flush_Data>

080a0822 <_ZN9USBSerialD0Ev>:
 80a0822:	b510      	push	{r4, lr}
 80a0824:	4604      	mov	r4, r0
 80a0826:	2114      	movs	r1, #20
 80a0828:	f000 feae 	bl	80a1588 <_ZdlPvj>
 80a082c:	4620      	mov	r0, r4
 80a082e:	bd10      	pop	{r4, pc}

080a0830 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0830:	b510      	push	{r4, lr}
 80a0832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0836:	4604      	mov	r4, r0
 80a0838:	4608      	mov	r0, r1
 80a083a:	2100      	movs	r1, #0
 80a083c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0840:	4b04      	ldr	r3, [pc, #16]	; (80a0854 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0842:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0844:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0846:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0848:	4611      	mov	r1, r2
  _blocking = true;
 80a084a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a084c:	f7ff fcda 	bl	80a0204 <HAL_USB_USART_Init>
}
 80a0850:	4620      	mov	r0, r4
 80a0852:	bd10      	pop	{r4, pc}
 80a0854:	080a1730 	.word	0x080a1730

080a0858 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0858:	b510      	push	{r4, lr}
 80a085a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a085c:	2214      	movs	r2, #20
 80a085e:	2100      	movs	r1, #0
 80a0860:	f000 feb6 	bl	80a15d0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0864:	4620      	mov	r0, r4
 80a0866:	bd10      	pop	{r4, pc}

080a0868 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0868:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a086a:	4d0f      	ldr	r5, [pc, #60]	; (80a08a8 <_Z16_fetch_usbserialv+0x40>)
{
 80a086c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a086e:	a801      	add	r0, sp, #4
 80a0870:	f7ff fff2 	bl	80a0858 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0874:	7829      	ldrb	r1, [r5, #0]
 80a0876:	f3bf 8f5b 	dmb	ish
 80a087a:	f011 0401 	ands.w	r4, r1, #1
 80a087e:	d110      	bne.n	80a08a2 <_Z16_fetch_usbserialv+0x3a>
 80a0880:	4628      	mov	r0, r5
 80a0882:	f7ff fc0e 	bl	80a00a2 <__cxa_guard_acquire>
 80a0886:	b160      	cbz	r0, 80a08a2 <_Z16_fetch_usbserialv+0x3a>
 80a0888:	4621      	mov	r1, r4
 80a088a:	aa01      	add	r2, sp, #4
 80a088c:	4807      	ldr	r0, [pc, #28]	; (80a08ac <_Z16_fetch_usbserialv+0x44>)
 80a088e:	f7ff ffcf 	bl	80a0830 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0892:	4628      	mov	r0, r5
 80a0894:	f7ff fc0a 	bl	80a00ac <__cxa_guard_release>
 80a0898:	4a05      	ldr	r2, [pc, #20]	; (80a08b0 <_Z16_fetch_usbserialv+0x48>)
 80a089a:	4906      	ldr	r1, [pc, #24]	; (80a08b4 <_Z16_fetch_usbserialv+0x4c>)
 80a089c:	4803      	ldr	r0, [pc, #12]	; (80a08ac <_Z16_fetch_usbserialv+0x44>)
 80a089e:	f000 fe6e 	bl	80a157e <__aeabi_atexit>
	return _usbserial;
}
 80a08a2:	4802      	ldr	r0, [pc, #8]	; (80a08ac <_Z16_fetch_usbserialv+0x44>)
 80a08a4:	b007      	add	sp, #28
 80a08a6:	bd30      	pop	{r4, r5, pc}
 80a08a8:	2000009c 	.word	0x2000009c
 80a08ac:	200000a4 	.word	0x200000a4
 80a08b0:	20000068 	.word	0x20000068
 80a08b4:	080a07bd 	.word	0x080a07bd

080a08b8 <_Z23acquireUSBSerial1Bufferv>:
 80a08b8:	b510      	push	{r4, lr}
 80a08ba:	4604      	mov	r4, r0
 80a08bc:	2214      	movs	r2, #20
 80a08be:	2100      	movs	r1, #0
 80a08c0:	f000 fe86 	bl	80a15d0 <memset>
 80a08c4:	4620      	mov	r0, r4
 80a08c6:	bd10      	pop	{r4, pc}

080a08c8 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a08c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a08ca:	4c0f      	ldr	r4, [pc, #60]	; (80a0908 <_Z17_fetch_usbserial1v+0x40>)
{
 80a08cc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a08ce:	a801      	add	r0, sp, #4
 80a08d0:	f7ff fff2 	bl	80a08b8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a08d4:	7823      	ldrb	r3, [r4, #0]
 80a08d6:	f3bf 8f5b 	dmb	ish
 80a08da:	07db      	lsls	r3, r3, #31
 80a08dc:	d410      	bmi.n	80a0900 <_Z17_fetch_usbserial1v+0x38>
 80a08de:	4620      	mov	r0, r4
 80a08e0:	f7ff fbdf 	bl	80a00a2 <__cxa_guard_acquire>
 80a08e4:	b160      	cbz	r0, 80a0900 <_Z17_fetch_usbserial1v+0x38>
 80a08e6:	2101      	movs	r1, #1
 80a08e8:	aa01      	add	r2, sp, #4
 80a08ea:	4808      	ldr	r0, [pc, #32]	; (80a090c <_Z17_fetch_usbserial1v+0x44>)
 80a08ec:	f7ff ffa0 	bl	80a0830 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a08f0:	4620      	mov	r0, r4
 80a08f2:	f7ff fbdb 	bl	80a00ac <__cxa_guard_release>
 80a08f6:	4a06      	ldr	r2, [pc, #24]	; (80a0910 <_Z17_fetch_usbserial1v+0x48>)
 80a08f8:	4906      	ldr	r1, [pc, #24]	; (80a0914 <_Z17_fetch_usbserial1v+0x4c>)
 80a08fa:	4804      	ldr	r0, [pc, #16]	; (80a090c <_Z17_fetch_usbserial1v+0x44>)
 80a08fc:	f000 fe3f 	bl	80a157e <__aeabi_atexit>
  return _usbserial1;
}
 80a0900:	4802      	ldr	r0, [pc, #8]	; (80a090c <_Z17_fetch_usbserial1v+0x44>)
 80a0902:	b006      	add	sp, #24
 80a0904:	bd10      	pop	{r4, pc}
 80a0906:	bf00      	nop
 80a0908:	200000a0 	.word	0x200000a0
 80a090c:	200000b8 	.word	0x200000b8
 80a0910:	20000068 	.word	0x20000068
 80a0914:	080a07bd 	.word	0x080a07bd

080a0918 <_ZN9IPAddressD1Ev>:
 80a0918:	4770      	bx	lr

080a091a <_ZN9IPAddressD0Ev>:
 80a091a:	b510      	push	{r4, lr}
 80a091c:	4604      	mov	r4, r0
 80a091e:	2118      	movs	r1, #24
 80a0920:	f000 fe32 	bl	80a1588 <_ZdlPvj>
 80a0924:	4620      	mov	r0, r4
 80a0926:	bd10      	pop	{r4, pc}

080a0928 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a092a:	460e      	mov	r6, r1
 80a092c:	2400      	movs	r4, #0
 80a092e:	f100 0708 	add.w	r7, r0, #8
 80a0932:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0934:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0938:	220a      	movs	r2, #10
 80a093a:	4630      	mov	r0, r6
 80a093c:	f000 fbfd 	bl	80a113a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0940:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0942:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0944:	d101      	bne.n	80a094a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0946:	4620      	mov	r0, r4
 80a0948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a094a:	2c00      	cmp	r4, #0
 80a094c:	d0f2      	beq.n	80a0934 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a094e:	212e      	movs	r1, #46	; 0x2e
 80a0950:	4630      	mov	r0, r6
 80a0952:	f000 fbef 	bl	80a1134 <_ZN5Print5printEc>
 80a0956:	4404      	add	r4, r0
 80a0958:	e7ec      	b.n	80a0934 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a095c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a095c:	b510      	push	{r4, lr}
 80a095e:	4604      	mov	r4, r0
 80a0960:	4b04      	ldr	r3, [pc, #16]	; (80a0974 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0962:	2211      	movs	r2, #17
 80a0964:	2100      	movs	r1, #0
 80a0966:	f840 3b04 	str.w	r3, [r0], #4
 80a096a:	f000 fe31 	bl	80a15d0 <memset>
}
 80a096e:	4620      	mov	r0, r4
 80a0970:	bd10      	pop	{r4, pc}
 80a0972:	bf00      	nop
 80a0974:	080a1760 	.word	0x080a1760

080a0978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0978:	4603      	mov	r3, r0
 80a097a:	4a07      	ldr	r2, [pc, #28]	; (80a0998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a097c:	b510      	push	{r4, lr}
 80a097e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0982:	f101 0210 	add.w	r2, r1, #16
 80a0986:	f851 4b04 	ldr.w	r4, [r1], #4
 80a098a:	4291      	cmp	r1, r2
 80a098c:	f843 4b04 	str.w	r4, [r3], #4
 80a0990:	d1f9      	bne.n	80a0986 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0992:	780a      	ldrb	r2, [r1, #0]
 80a0994:	701a      	strb	r2, [r3, #0]
}
 80a0996:	bd10      	pop	{r4, pc}
 80a0998:	080a1760 	.word	0x080a1760

080a099c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a099c:	4a02      	ldr	r2, [pc, #8]	; (80a09a8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a099e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a09a2:	2204      	movs	r2, #4
 80a09a4:	7502      	strb	r2, [r0, #20]
}
 80a09a6:	4770      	bx	lr
 80a09a8:	080a1760 	.word	0x080a1760

080a09ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a09ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a09ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a09b2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a09b6:	2304      	movs	r3, #4
 80a09b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a09bc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a09c0:	6044      	str	r4, [r0, #4]
 80a09c2:	7503      	strb	r3, [r0, #20]
}
 80a09c4:	bd10      	pop	{r4, pc}
	...

080a09c8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a09c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09ca:	4d04      	ldr	r5, [pc, #16]	; (80a09dc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a09cc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a09ce:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a09d2:	9500      	str	r5, [sp, #0]
 80a09d4:	f7ff ffea 	bl	80a09ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a09d8:	b003      	add	sp, #12
 80a09da:	bd30      	pop	{r4, r5, pc}
 80a09dc:	080a1760 	.word	0x080a1760

080a09e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a09e0:	4770      	bx	lr

080a09e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a09e2:	2000      	movs	r0, #0
 80a09e4:	4770      	bx	lr

080a09e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a09e6:	b510      	push	{r4, lr}
 80a09e8:	4604      	mov	r4, r0
 80a09ea:	2110      	movs	r1, #16
 80a09ec:	f000 fdcc 	bl	80a1588 <_ZdlPvj>
 80a09f0:	4620      	mov	r0, r4
 80a09f2:	bd10      	pop	{r4, pc}

080a09f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a09f4:	b508      	push	{r3, lr}
      { delete this; }
 80a09f6:	f7ff fff6 	bl	80a09e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a09fa:	bd08      	pop	{r3, pc}

080a09fc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a09fc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a09fe:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0a00:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0a04:	6002      	str	r2, [r0, #0]
 80a0a06:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0a08:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0a0a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0a0c:	680c      	ldr	r4, [r1, #0]
 80a0a0e:	8085      	strh	r5, [r0, #4]
 80a0a10:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0a12:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0a14:	bd30      	pop	{r4, r5, pc}

080a0a16 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0a16:	b510      	push	{r4, lr}
 80a0a18:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0a1a:	6800      	ldr	r0, [r0, #0]
 80a0a1c:	f7ff fd8a 	bl	80a0534 <free>
}
 80a0a20:	4620      	mov	r0, r4
 80a0a22:	bd10      	pop	{r4, pc}

080a0a24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0a24:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0a26:	68c4      	ldr	r4, [r0, #12]
 80a0a28:	b1f4      	cbz	r4, 80a0a68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a0a2a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0a2c:	2b02      	cmp	r3, #2
 80a0a2e:	d103      	bne.n	80a0a38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0a30:	f104 000c 	add.w	r0, r4, #12
 80a0a34:	f7ff ffef 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0a38:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0a3a:	b135      	cbz	r5, 80a0a4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a0a3c:	4628      	mov	r0, r5
 80a0a3e:	f7ff fd99 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
 80a0a42:	2110      	movs	r1, #16
 80a0a44:	4628      	mov	r0, r5
 80a0a46:	f000 fd9f 	bl	80a1588 <_ZdlPvj>
 80a0a4a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0a4c:	b135      	cbz	r5, 80a0a5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0a4e:	4628      	mov	r0, r5
 80a0a50:	f7ff fd90 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
 80a0a54:	2110      	movs	r1, #16
 80a0a56:	4628      	mov	r0, r5
 80a0a58:	f000 fd96 	bl	80a1588 <_ZdlPvj>
 80a0a5c:	4620      	mov	r0, r4
 80a0a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0a62:	2114      	movs	r1, #20
 80a0a64:	f000 bd90 	b.w	80a1588 <_ZdlPvj>
 80a0a68:	bd38      	pop	{r3, r4, r5, pc}

080a0a6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a0a6a:	680b      	ldr	r3, [r1, #0]
 80a0a6c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a0a6e:	b113      	cbz	r3, 80a0a76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0a70:	685a      	ldr	r2, [r3, #4]
 80a0a72:	3201      	adds	r2, #1
 80a0a74:	605a      	str	r2, [r3, #4]
      }
 80a0a76:	4770      	bx	lr

080a0a78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0a7a:	460e      	mov	r6, r1
 80a0a7c:	4604      	mov	r4, r0
 80a0a7e:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0a82:	460d      	mov	r5, r1
 80a0a84:	a801      	add	r0, sp, #4
 80a0a86:	4631      	mov	r1, r6
 80a0a88:	9300      	str	r3, [sp, #0]
 80a0a8a:	f7ff ffee 	bl	80a0a6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0a8e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0a90:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0a92:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0a94:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0a96:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0a98:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0a9a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0a9c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0a9e:	f7ff fb0c 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0aa2:	4630      	mov	r0, r6
 80a0aa4:	f7ff fb09 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0aa8:	4628      	mov	r0, r5
 80a0aaa:	2108      	movs	r1, #8
 80a0aac:	f000 fd6c 	bl	80a1588 <_ZdlPvj>
        return p;
    }
 80a0ab0:	4620      	mov	r0, r4
 80a0ab2:	b002      	add	sp, #8
 80a0ab4:	bd70      	pop	{r4, r5, r6, pc}

080a0ab6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a0ab6:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ab8:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0aba:	460b      	mov	r3, r1
 80a0abc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0abe:	c803      	ldmia	r0, {r0, r1}
 80a0ac0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0ac8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0ad0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0ad4:	b002      	add	sp, #8
 80a0ad6:	bd10      	pop	{r4, pc}

080a0ad8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a0ad8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0ada:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0adc:	b90a      	cbnz	r2, 80a0ae2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0ade:	f000 fd57 	bl	80a1590 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0ae2:	68c3      	ldr	r3, [r0, #12]
    }
 80a0ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0ae8:	4718      	bx	r3

080a0aea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0aea:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0aec:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0aee:	f100 0110 	add.w	r1, r0, #16
 80a0af2:	f7ff fff1 	bl	80a0ad8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a0af6:	bd08      	pop	{r3, pc}

080a0af8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a0af8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0afa:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0afc:	b90a      	cbnz	r2, 80a0b02 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0afe:	f000 fd47 	bl	80a1590 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b02:	68c3      	ldr	r3, [r0, #12]
    }
 80a0b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b08:	4718      	bx	r3

080a0b0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0b0a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0b0c:	6800      	ldr	r0, [r0, #0]
 80a0b0e:	f100 0110 	add.w	r1, r0, #16
 80a0b12:	f7ff fff1 	bl	80a0af8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a0b16:	bd08      	pop	{r3, pc}

080a0b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b18:	b538      	push	{r3, r4, r5, lr}
 80a0b1a:	2300      	movs	r3, #0
 80a0b1c:	4604      	mov	r4, r0
 80a0b1e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b20:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b22:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b24:	f7ff fab7 	bl	80a0096 <_Znwj>
 80a0b28:	b128      	cbz	r0, 80a0b36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0b2a:	2301      	movs	r3, #1
 80a0b2c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a0b30:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0b32:	60c5      	str	r5, [r0, #12]
 80a0b34:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b36:	6020      	str	r0, [r4, #0]
	}
 80a0b38:	4620      	mov	r0, r4
 80a0b3a:	bd38      	pop	{r3, r4, r5, pc}
 80a0b3c:	080a1774 	.word	0x080a1774

080a0b40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a0b40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0b42:	2300      	movs	r3, #0
 80a0b44:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0b46:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0b48:	4604      	mov	r4, r0
 80a0b4a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0b4c:	b12b      	cbz	r3, 80a0b5a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0b4e:	2202      	movs	r2, #2
 80a0b50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0b52:	68eb      	ldr	r3, [r5, #12]
 80a0b54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0b56:	68ab      	ldr	r3, [r5, #8]
 80a0b58:	60a3      	str	r3, [r4, #8]
    }
 80a0b5a:	4620      	mov	r0, r4
 80a0b5c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a0b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0b62:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0b64:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0b66:	4668      	mov	r0, sp
 80a0b68:	f7ff ff48 	bl	80a09fc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0b6c:	f04f 0302 	mov.w	r3, #2
 80a0b70:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0b74:	2a00      	cmp	r2, #0
 80a0b76:	d103      	bne.n	80a0b80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0b78:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0b7c:	2900      	cmp	r1, #0
 80a0b7e:	d1f7      	bne.n	80a0b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a0b80:	d125      	bne.n	80a0bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a0b82:	f104 050c 	add.w	r5, r4, #12
 80a0b86:	4669      	mov	r1, sp
 80a0b88:	4628      	mov	r0, r5
 80a0b8a:	f7ff ff37 	bl	80a09fc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0b8e:	2301      	movs	r3, #1
 80a0b90:	f3bf 8f5b 	dmb	ish
 80a0b94:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0b96:	2000      	movs	r0, #0
 80a0b98:	f3bf 8f5b 	dmb	ish
 80a0b9c:	f104 0308 	add.w	r3, r4, #8
 80a0ba0:	e853 6f00 	ldrex	r6, [r3]
 80a0ba4:	e843 0200 	strex	r2, r0, [r3]
 80a0ba8:	2a00      	cmp	r2, #0
 80a0baa:	d1f9      	bne.n	80a0ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0bac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0bb0:	b16e      	cbz	r6, 80a0bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a0bb2:	f7ff fc89 	bl	80a04c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0bb6:	b178      	cbz	r0, 80a0bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0bb8:	4629      	mov	r1, r5
 80a0bba:	4630      	mov	r0, r6
 80a0bbc:	f7ff ff8c 	bl	80a0ad8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a0bc0:	4630      	mov	r0, r6
 80a0bc2:	f7ff fcd7 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0bc6:	2110      	movs	r1, #16
 80a0bc8:	4630      	mov	r0, r6
 80a0bca:	f000 fcdd 	bl	80a1588 <_ZdlPvj>
        p_->setError(std::move(error));
 80a0bce:	4668      	mov	r0, sp
 80a0bd0:	f7ff ff21 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
    }
 80a0bd4:	b009      	add	sp, #36	; 0x24
 80a0bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0bd8:	4631      	mov	r1, r6
 80a0bda:	a802      	add	r0, sp, #8
 80a0bdc:	f7ff ffb0 	bl	80a0b40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0be0:	68e0      	ldr	r0, [r4, #12]
 80a0be2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0be6:	b108      	cbz	r0, 80a0bec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a0be8:	f000 fd1e 	bl	80a1628 <strdup>
        type_(type) {
 80a0bec:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0bee:	2010      	movs	r0, #16
 80a0bf0:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0bf4:	f7ff fa4f 	bl	80a0096 <_Znwj>
 80a0bf8:	4605      	mov	r5, r0
 80a0bfa:	b1e8      	cbz	r0, 80a0c38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a0bfc:	2700      	movs	r7, #0
 80a0bfe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0c00:	2018      	movs	r0, #24
 80a0c02:	f7ff fa48 	bl	80a0096 <_Znwj>
 80a0c06:	4604      	mov	r4, r0
 80a0c08:	b188      	cbz	r0, 80a0c2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a0c0a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0c0c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0c0e:	a802      	add	r0, sp, #8
 80a0c10:	f7ff ff51 	bl	80a0ab6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0c14:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0c16:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c18:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0c1a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0c1c:	9204      	str	r2, [sp, #16]
 80a0c1e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0c20:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c22:	60e3      	str	r3, [r4, #12]
 80a0c24:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a0c28:	9205      	str	r2, [sp, #20]
 80a0c2a:	f7ff fee7 	bl	80a09fc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a0c2e:	4b08      	ldr	r3, [pc, #32]	; (80a0c50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0c30:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0c32:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0c34:	4b07      	ldr	r3, [pc, #28]	; (80a0c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a0c36:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a0c38:	a806      	add	r0, sp, #24
 80a0c3a:	f7ff feec 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0c3e:	a802      	add	r0, sp, #8
 80a0c40:	f7ff fc98 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0c44:	2200      	movs	r2, #0
 80a0c46:	4629      	mov	r1, r5
 80a0c48:	4803      	ldr	r0, [pc, #12]	; (80a0c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a0c4a:	f7ff fc45 	bl	80a04d8 <application_thread_invoke>
 80a0c4e:	e7b7      	b.n	80a0bc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0c50:	080a0aeb 	.word	0x080a0aeb
 80a0c54:	080a0d81 	.word	0x080a0d81
 80a0c58:	080a0715 	.word	0x080a0715

080a0c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0c60:	b08a      	sub	sp, #40	; 0x28
 80a0c62:	4605      	mov	r5, r0
 80a0c64:	460c      	mov	r4, r1
 80a0c66:	4617      	mov	r7, r2
 80a0c68:	4698      	mov	r8, r3
 80a0c6a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0c6e:	f7ff fbb3 	bl	80a03d8 <spark_cloud_flag_connected>
 80a0c72:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0c74:	4682      	mov	sl, r0
 80a0c76:	bb38      	cbnz	r0, 80a0cc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a0c78:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0c7c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0c7e:	a905      	add	r1, sp, #20
 80a0c80:	4630      	mov	r0, r6
 80a0c82:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0c86:	f7ff feb9 	bl	80a09fc <_ZN8particle5ErrorC1EOS0_>
 80a0c8a:	2014      	movs	r0, #20
 80a0c8c:	f7ff fa03 	bl	80a0096 <_Znwj>
 80a0c90:	4604      	mov	r4, r0
 80a0c92:	b148      	cbz	r0, 80a0ca8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0c94:	2302      	movs	r3, #2
 80a0c96:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0c98:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0c9a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0c9e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a0ca0:	4631      	mov	r1, r6
 80a0ca2:	300c      	adds	r0, #12
 80a0ca4:	f7ff feaa 	bl	80a09fc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0ca8:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a0caa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0cac:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a0cb0:	f7ff ff32 	bl	80a0b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0cb4:	4630      	mov	r0, r6
 80a0cb6:	f7ff feae 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0cba:	a805      	add	r0, sp, #20
 80a0cbc:	f7ff feab 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a0cc0:	4628      	mov	r0, r5
 80a0cc2:	b00a      	add	sp, #40	; 0x28
 80a0cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0cc8:	230c      	movs	r3, #12
 80a0cca:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0cce:	2014      	movs	r0, #20
 80a0cd0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a0cd4:	9307      	str	r3, [sp, #28]
 80a0cd6:	f7ff f9de 	bl	80a0096 <_Znwj>
 80a0cda:	4601      	mov	r1, r0
 80a0cdc:	b128      	cbz	r0, 80a0cea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0cde:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a0ce2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0ce6:	f880 a001 	strb.w	sl, [r0, #1]
 80a0cea:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0cec:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a0cee:	f7ff ff13 	bl	80a0b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a0cf2:	4b22      	ldr	r3, [pc, #136]	; (80a0d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0cf4:	2008      	movs	r0, #8
 80a0cf6:	9308      	str	r3, [sp, #32]
 80a0cf8:	f7ff f9cd 	bl	80a0096 <_Znwj>
 80a0cfc:	4682      	mov	sl, r0
 80a0cfe:	b128      	cbz	r0, 80a0d0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d00:	9b03      	ldr	r3, [sp, #12]
 80a0d02:	a904      	add	r1, sp, #16
 80a0d04:	f840 3b04 	str.w	r3, [r0], #4
 80a0d08:	f7ff feaf 	bl	80a0a6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0d0c:	4642      	mov	r2, r8
 80a0d0e:	4639      	mov	r1, r7
 80a0d10:	4620      	mov	r0, r4
 80a0d12:	9600      	str	r6, [sp, #0]
 80a0d14:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a0d18:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0d1c:	f7ff fb64 	bl	80a03e8 <spark_send_event>
 80a0d20:	b9b8      	cbnz	r0, 80a0d52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a0d22:	9b03      	ldr	r3, [sp, #12]
 80a0d24:	785b      	ldrb	r3, [r3, #1]
 80a0d26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0d2a:	b993      	cbnz	r3, 80a0d52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a0d2c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a0d30:	a905      	add	r1, sp, #20
 80a0d32:	a803      	add	r0, sp, #12
 80a0d34:	9205      	str	r2, [sp, #20]
 80a0d36:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0d3a:	f7ff ff11 	bl	80a0b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0d3e:	a805      	add	r0, sp, #20
 80a0d40:	f7ff fe69 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0d44:	a805      	add	r0, sp, #20
 80a0d46:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0d48:	f7ff fe96 	bl	80a0a78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a0d4c:	a806      	add	r0, sp, #24
 80a0d4e:	f7ff f9b4 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d52:	9b03      	ldr	r3, [sp, #12]
 80a0d54:	a904      	add	r1, sp, #16
 80a0d56:	a806      	add	r0, sp, #24
 80a0d58:	9305      	str	r3, [sp, #20]
 80a0d5a:	f7ff fe86 	bl	80a0a6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0d5e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0d60:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0d62:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a0d64:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0d66:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a0d68:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a0d6a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a0d6c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a0d6e:	f7ff f9a4 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d72:	a804      	add	r0, sp, #16
 80a0d74:	f7ff f9a1 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a0d78:	e7a2      	b.n	80a0cc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a0d7a:	bf00      	nop
 80a0d7c:	080a0e45 	.word	0x080a0e45

080a0d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a0d80:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d84:	4605      	mov	r5, r0
	  switch (__op)
 80a0d86:	d007      	beq.n	80a0d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a0d88:	2a03      	cmp	r2, #3
 80a0d8a:	d018      	beq.n	80a0dbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a0d8c:	2a01      	cmp	r2, #1
 80a0d8e:	d101      	bne.n	80a0d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0d90:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0d92:	6003      	str	r3, [r0, #0]
	}
 80a0d94:	2000      	movs	r0, #0
 80a0d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d98:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a0d9a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d9c:	f7ff f97b 	bl	80a0096 <_Znwj>
 80a0da0:	4604      	mov	r4, r0
 80a0da2:	b150      	cbz	r0, 80a0dba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0da4:	4631      	mov	r1, r6
 80a0da6:	f7ff fecb 	bl	80a0b40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0daa:	6930      	ldr	r0, [r6, #16]
 80a0dac:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0db0:	b108      	cbz	r0, 80a0db6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a0db2:	f000 fc39 	bl	80a1628 <strdup>
        type_(type) {
 80a0db6:	6120      	str	r0, [r4, #16]
 80a0db8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a0dba:	602c      	str	r4, [r5, #0]
	}
 80a0dbc:	e7ea      	b.n	80a0d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0dbe:	6804      	ldr	r4, [r0, #0]
 80a0dc0:	2c00      	cmp	r4, #0
 80a0dc2:	d0e7      	beq.n	80a0d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a0dc4:	f104 0010 	add.w	r0, r4, #16
 80a0dc8:	f7ff fe25 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0dcc:	4620      	mov	r0, r4
 80a0dce:	f7ff fbd1 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0dd2:	2118      	movs	r1, #24
 80a0dd4:	4620      	mov	r0, r4
 80a0dd6:	f000 fbd7 	bl	80a1588 <_ZdlPvj>
 80a0dda:	e7db      	b.n	80a0d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a0ddc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a0ddc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0dde:	2300      	movs	r3, #0
 80a0de0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0de2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0de4:	4604      	mov	r4, r0
 80a0de6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0de8:	b12b      	cbz	r3, 80a0df6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0dea:	2202      	movs	r2, #2
 80a0dec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0dee:	68eb      	ldr	r3, [r5, #12]
 80a0df0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0df2:	68ab      	ldr	r3, [r5, #8]
 80a0df4:	60a3      	str	r3, [r4, #8]
    }
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	bd38      	pop	{r3, r4, r5, pc}

080a0dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a0dfa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0dfc:	b570      	push	{r4, r5, r6, lr}
 80a0dfe:	4604      	mov	r4, r0
	  switch (__op)
 80a0e00:	d007      	beq.n	80a0e12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a0e02:	2a03      	cmp	r2, #3
 80a0e04:	d012      	beq.n	80a0e2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a0e06:	2a01      	cmp	r2, #1
 80a0e08:	d101      	bne.n	80a0e0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0e0a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0e0c:	6003      	str	r3, [r0, #0]
	}
 80a0e0e:	2000      	movs	r0, #0
 80a0e10:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0e12:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a0e14:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0e16:	f7ff f93e 	bl	80a0096 <_Znwj>
 80a0e1a:	4605      	mov	r5, r0
 80a0e1c:	b120      	cbz	r0, 80a0e28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a0e1e:	4631      	mov	r1, r6
 80a0e20:	f7ff ffdc 	bl	80a0ddc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0e24:	7c33      	ldrb	r3, [r6, #16]
 80a0e26:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a0e28:	6025      	str	r5, [r4, #0]
	}
 80a0e2a:	e7f0      	b.n	80a0e0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0e2c:	6804      	ldr	r4, [r0, #0]
 80a0e2e:	2c00      	cmp	r4, #0
 80a0e30:	d0ed      	beq.n	80a0e0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a0e32:	4620      	mov	r0, r4
 80a0e34:	f7ff fb9e 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0e38:	2114      	movs	r1, #20
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	f000 fba4 	bl	80a1588 <_ZdlPvj>
 80a0e40:	e7e5      	b.n	80a0e0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a0e44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e46:	4604      	mov	r4, r0
 80a0e48:	b089      	sub	sp, #36	; 0x24
 80a0e4a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0e4c:	a801      	add	r0, sp, #4
 80a0e4e:	4611      	mov	r1, r2
 80a0e50:	f7ff fe12 	bl	80a0a78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0e54:	b1a4      	cbz	r4, 80a0e80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0e56:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0e58:	b11d      	cbz	r5, 80a0e62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a0e5a:	4628      	mov	r0, r5
 80a0e5c:	f000 fbe4 	bl	80a1628 <strdup>
 80a0e60:	4605      	mov	r5, r0
 80a0e62:	a801      	add	r0, sp, #4
 80a0e64:	a903      	add	r1, sp, #12
        type_(type) {
 80a0e66:	9503      	str	r5, [sp, #12]
 80a0e68:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a0e6c:	f7ff fe78 	bl	80a0b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0e70:	a803      	add	r0, sp, #12
 80a0e72:	f7ff fdd0 	bl	80a0a16 <_ZN8particle5ErrorD1Ev>
 80a0e76:	a802      	add	r0, sp, #8
 80a0e78:	f7ff f91f 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0e7c:	b009      	add	sp, #36	; 0x24
 80a0e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0e80:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0e82:	9d01      	ldr	r5, [sp, #4]
 80a0e84:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a0e88:	2a00      	cmp	r2, #0
 80a0e8a:	d103      	bne.n	80a0e94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a0e8c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a0e90:	2900      	cmp	r1, #0
 80a0e92:	d1f7      	bne.n	80a0e84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a0e94:	d1ef      	bne.n	80a0e76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a0e96:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0e98:	f3bf 8f5b 	dmb	ish
 80a0e9c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0e9e:	f3bf 8f5b 	dmb	ish
 80a0ea2:	1d2b      	adds	r3, r5, #4
 80a0ea4:	e853 6f00 	ldrex	r6, [r3]
 80a0ea8:	e843 4200 	strex	r2, r4, [r3]
 80a0eac:	2a00      	cmp	r2, #0
 80a0eae:	d1f9      	bne.n	80a0ea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a0eb0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0eb4:	2e00      	cmp	r6, #0
 80a0eb6:	d0de      	beq.n	80a0e76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	f7ff fb05 	bl	80a04c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0ebe:	4607      	mov	r7, r0
 80a0ec0:	b160      	cbz	r0, 80a0edc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0ec2:	4630      	mov	r0, r6
 80a0ec4:	f105 010c 	add.w	r1, r5, #12
 80a0ec8:	f7ff fe16 	bl	80a0af8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a0ecc:	4630      	mov	r0, r6
 80a0ece:	f7ff fb51 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0ed2:	2110      	movs	r1, #16
 80a0ed4:	4630      	mov	r0, r6
 80a0ed6:	f000 fb57 	bl	80a1588 <_ZdlPvj>
 80a0eda:	e7cc      	b.n	80a0e76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0edc:	4631      	mov	r1, r6
 80a0ede:	a803      	add	r0, sp, #12
 80a0ee0:	f7ff ff7c 	bl	80a0ddc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0ee4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0ee6:	2010      	movs	r0, #16
 80a0ee8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a0eec:	f7ff f8d3 	bl	80a0096 <_Znwj>
 80a0ef0:	4605      	mov	r5, r0
 80a0ef2:	b1d0      	cbz	r0, 80a0f2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a0ef4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ef6:	2014      	movs	r0, #20
 80a0ef8:	f7ff f8cd 	bl	80a0096 <_Znwj>
 80a0efc:	4604      	mov	r4, r0
 80a0efe:	b178      	cbz	r0, 80a0f20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a0f00:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0f02:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0f04:	a803      	add	r0, sp, #12
 80a0f06:	f7ff fdd6 	bl	80a0ab6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f0a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f0e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f10:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a0f12:	9205      	str	r2, [sp, #20]
 80a0f14:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f16:	60e3      	str	r3, [r4, #12]
 80a0f18:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a0f1c:	9206      	str	r2, [sp, #24]
 80a0f1e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f20:	4b06      	ldr	r3, [pc, #24]	; (80a0f3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f22:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f24:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f26:	4b06      	ldr	r3, [pc, #24]	; (80a0f40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a0f28:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a0f2a:	a803      	add	r0, sp, #12
 80a0f2c:	f7ff fb22 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f30:	2200      	movs	r2, #0
 80a0f32:	4629      	mov	r1, r5
 80a0f34:	4803      	ldr	r0, [pc, #12]	; (80a0f44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a0f36:	f7ff facf 	bl	80a04d8 <application_thread_invoke>
 80a0f3a:	e7c7      	b.n	80a0ecc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a0f3c:	080a0b0b 	.word	0x080a0b0b
 80a0f40:	080a0dfb 	.word	0x080a0dfb
 80a0f44:	080a0715 	.word	0x080a0715

080a0f48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0f48:	4b01      	ldr	r3, [pc, #4]	; (80a0f50 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0f4a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0f4c:	4770      	bx	lr
 80a0f4e:	bf00      	nop
 80a0f50:	20000004 	.word	0x20000004

080a0f54 <serialEventRun>:
{
 80a0f54:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0f56:	4b13      	ldr	r3, [pc, #76]	; (80a0fa4 <serialEventRun+0x50>)
 80a0f58:	b143      	cbz	r3, 80a0f6c <serialEventRun+0x18>
 80a0f5a:	f7ff fc85 	bl	80a0868 <_Z16_fetch_usbserialv>
 80a0f5e:	6803      	ldr	r3, [r0, #0]
 80a0f60:	691b      	ldr	r3, [r3, #16]
 80a0f62:	4798      	blx	r3
 80a0f64:	2800      	cmp	r0, #0
 80a0f66:	dd01      	ble.n	80a0f6c <serialEventRun+0x18>
        serialEvent();
 80a0f68:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0f6c:	4b0e      	ldr	r3, [pc, #56]	; (80a0fa8 <serialEventRun+0x54>)
 80a0f6e:	b143      	cbz	r3, 80a0f82 <serialEventRun+0x2e>
 80a0f70:	f000 f952 	bl	80a1218 <_Z22__fetch_global_Serial1v>
 80a0f74:	6803      	ldr	r3, [r0, #0]
 80a0f76:	691b      	ldr	r3, [r3, #16]
 80a0f78:	4798      	blx	r3
 80a0f7a:	2800      	cmp	r0, #0
 80a0f7c:	dd01      	ble.n	80a0f82 <serialEventRun+0x2e>
        serialEvent1();
 80a0f7e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0f82:	4b0a      	ldr	r3, [pc, #40]	; (80a0fac <serialEventRun+0x58>)
 80a0f84:	b10b      	cbz	r3, 80a0f8a <serialEventRun+0x36>
 80a0f86:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0f8a:	4b09      	ldr	r3, [pc, #36]	; (80a0fb0 <serialEventRun+0x5c>)
 80a0f8c:	b143      	cbz	r3, 80a0fa0 <serialEventRun+0x4c>
 80a0f8e:	f7ff fc9b 	bl	80a08c8 <_Z17_fetch_usbserial1v>
 80a0f92:	6803      	ldr	r3, [r0, #0]
 80a0f94:	691b      	ldr	r3, [r3, #16]
 80a0f96:	4798      	blx	r3
 80a0f98:	2800      	cmp	r0, #0
 80a0f9a:	dd01      	ble.n	80a0fa0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0f9c:	f3af 8000 	nop.w
}
 80a0fa0:	bd08      	pop	{r3, pc}
 80a0fa2:	bf00      	nop
	...

080a0fb4 <_post_loop>:
{
 80a0fb4:	b508      	push	{r3, lr}
	serialEventRun();
 80a0fb6:	f7ff ffcd 	bl	80a0f54 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0fba:	f7ff f9fd 	bl	80a03b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0fbe:	4b01      	ldr	r3, [pc, #4]	; (80a0fc4 <_post_loop+0x10>)
 80a0fc0:	6018      	str	r0, [r3, #0]
}
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	2000014c 	.word	0x2000014c

080a0fc8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0fc8:	4802      	ldr	r0, [pc, #8]	; (80a0fd4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0fca:	4a03      	ldr	r2, [pc, #12]	; (80a0fd8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0fcc:	4903      	ldr	r1, [pc, #12]	; (80a0fdc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0fce:	1a12      	subs	r2, r2, r0
 80a0fd0:	f000 baf0 	b.w	80a15b4 <memcpy>
 80a0fd4:	40024000 	.word	0x40024000
 80a0fd8:	40024004 	.word	0x40024004
 80a0fdc:	080a1860 	.word	0x080a1860

080a0fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0fe0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0fe2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0fe4:	461a      	mov	r2, r3
 80a0fe6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0fea:	9300      	str	r3, [sp, #0]
 80a0fec:	f7ff fa86 	bl	80a04fc <system_ctrl_set_result>
}
 80a0ff0:	b003      	add	sp, #12
 80a0ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0ff8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0ff8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0ffa:	8843      	ldrh	r3, [r0, #2]
 80a0ffc:	2b0a      	cmp	r3, #10
 80a0ffe:	d008      	beq.n	80a1012 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1000:	2b50      	cmp	r3, #80	; 0x50
 80a1002:	d10b      	bne.n	80a101c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1004:	4b09      	ldr	r3, [pc, #36]	; (80a102c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1006:	681b      	ldr	r3, [r3, #0]
 80a1008:	b14b      	cbz	r3, 80a101e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a100a:	b003      	add	sp, #12
 80a100c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1010:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1012:	f7ff ffe5 	bl	80a0fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1016:	b003      	add	sp, #12
 80a1018:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a101c:	2300      	movs	r3, #0
 80a101e:	461a      	mov	r2, r3
 80a1020:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1024:	9300      	str	r3, [sp, #0]
 80a1026:	f7ff fa69 	bl	80a04fc <system_ctrl_set_result>
}
 80a102a:	e7f4      	b.n	80a1016 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a102c:	200000d0 	.word	0x200000d0

080a1030 <module_user_init_hook>:
{
 80a1030:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1032:	4c12      	ldr	r4, [pc, #72]	; (80a107c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1034:	2100      	movs	r1, #0
 80a1036:	4812      	ldr	r0, [pc, #72]	; (80a1080 <module_user_init_hook+0x50>)
 80a1038:	f7ff fa94 	bl	80a0564 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a103c:	4d11      	ldr	r5, [pc, #68]	; (80a1084 <module_user_init_hook+0x54>)
 80a103e:	6823      	ldr	r3, [r4, #0]
 80a1040:	42ab      	cmp	r3, r5
 80a1042:	bf0c      	ite	eq
 80a1044:	2201      	moveq	r2, #1
 80a1046:	2200      	movne	r2, #0
 80a1048:	4b0f      	ldr	r3, [pc, #60]	; (80a1088 <module_user_init_hook+0x58>)
 80a104a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a104c:	d002      	beq.n	80a1054 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a104e:	f7ff ffbb 	bl	80a0fc8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1052:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1054:	f7ff f9a8 	bl	80a03a8 <HAL_RNG_GetRandomNumber>
 80a1058:	4604      	mov	r4, r0
    srand(seed);
 80a105a:	f000 fac1 	bl	80a15e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a105e:	4b0b      	ldr	r3, [pc, #44]	; (80a108c <module_user_init_hook+0x5c>)
 80a1060:	b113      	cbz	r3, 80a1068 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1062:	4620      	mov	r0, r4
 80a1064:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1068:	2100      	movs	r1, #0
 80a106a:	4808      	ldr	r0, [pc, #32]	; (80a108c <module_user_init_hook+0x5c>)
 80a106c:	f7ff f9c4 	bl	80a03f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1074:	2100      	movs	r1, #0
 80a1076:	4806      	ldr	r0, [pc, #24]	; (80a1090 <module_user_init_hook+0x60>)
 80a1078:	f7ff ba36 	b.w	80a04e8 <system_ctrl_set_app_request_handler>
 80a107c:	40024000 	.word	0x40024000
 80a1080:	080a0f49 	.word	0x080a0f49
 80a1084:	9a271c1e 	.word	0x9a271c1e
 80a1088:	200000cc 	.word	0x200000cc
 80a108c:	00000000 	.word	0x00000000
 80a1090:	080a0ff9 	.word	0x080a0ff9

080a1094 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1094:	b510      	push	{r4, lr}
 80a1096:	4604      	mov	r4, r0
 80a1098:	f7ff fa6c 	bl	80a0574 <_ZNSt14_Function_baseD1Ev>
 80a109c:	4620      	mov	r0, r4
 80a109e:	bd10      	pop	{r4, pc}

080a10a0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a10a0:	2300      	movs	r3, #0
 80a10a2:	4803      	ldr	r0, [pc, #12]	; (80a10b0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a10a4:	4a03      	ldr	r2, [pc, #12]	; (80a10b4 <_GLOBAL__sub_I_RGB+0x14>)
 80a10a6:	4904      	ldr	r1, [pc, #16]	; (80a10b8 <_GLOBAL__sub_I_RGB+0x18>)
 80a10a8:	6083      	str	r3, [r0, #8]
 80a10aa:	f000 ba68 	b.w	80a157e <__aeabi_atexit>
 80a10ae:	bf00      	nop
 80a10b0:	200000d4 	.word	0x200000d4
 80a10b4:	20000068 	.word	0x20000068
 80a10b8:	080a1095 	.word	0x080a1095

080a10bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a10bc:	2100      	movs	r1, #0
 80a10be:	f7ff b9fb 	b.w	80a04b8 <system_delay_ms>
	...

080a10c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a10c4:	4b02      	ldr	r3, [pc, #8]	; (80a10d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a10c6:	681a      	ldr	r2, [r3, #0]
 80a10c8:	4b02      	ldr	r3, [pc, #8]	; (80a10d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a10ca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a10cc:	4770      	bx	lr
 80a10ce:	bf00      	nop
 80a10d0:	20000000 	.word	0x20000000
 80a10d4:	200000e4 	.word	0x200000e4

080a10d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a10d8:	4b01      	ldr	r3, [pc, #4]	; (80a10e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a10da:	4a02      	ldr	r2, [pc, #8]	; (80a10e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a10dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a10de:	4770      	bx	lr
 80a10e0:	200000e8 	.word	0x200000e8
 80a10e4:	080a17a4 	.word	0x080a17a4

080a10e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a10e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10ea:	4606      	mov	r6, r0
 80a10ec:	460d      	mov	r5, r1
  size_t n = 0;
 80a10ee:	2400      	movs	r4, #0
 80a10f0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a10f2:	42bd      	cmp	r5, r7
 80a10f4:	d00c      	beq.n	80a1110 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a10f6:	6833      	ldr	r3, [r6, #0]
 80a10f8:	4630      	mov	r0, r6
 80a10fa:	689b      	ldr	r3, [r3, #8]
 80a10fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1100:	4798      	blx	r3
     if (chunk>=0)
 80a1102:	1e03      	subs	r3, r0, #0
 80a1104:	db01      	blt.n	80a110a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1106:	441c      	add	r4, r3
  while (size--) {
 80a1108:	e7f3      	b.n	80a10f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a110a:	2c00      	cmp	r4, #0
 80a110c:	bf08      	it	eq
 80a110e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1110:	4620      	mov	r0, r4
 80a1112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1114 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1114:	b570      	push	{r4, r5, r6, lr}
 80a1116:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1118:	460c      	mov	r4, r1
    }
 80a111a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a111c:	b149      	cbz	r1, 80a1132 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a111e:	f000 fa9e 	bl	80a165e <strlen>
 80a1122:	682b      	ldr	r3, [r5, #0]
 80a1124:	4602      	mov	r2, r0
 80a1126:	4621      	mov	r1, r4
 80a1128:	4628      	mov	r0, r5
    }
 80a112a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a112e:	68db      	ldr	r3, [r3, #12]
 80a1130:	4718      	bx	r3
    }
 80a1132:	bd70      	pop	{r4, r5, r6, pc}

080a1134 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1134:	6803      	ldr	r3, [r0, #0]
 80a1136:	689b      	ldr	r3, [r3, #8]
 80a1138:	4718      	bx	r3

080a113a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a113a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a113c:	2a01      	cmp	r2, #1
 80a113e:	bf98      	it	ls
 80a1140:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1142:	b530      	push	{r4, r5, lr}
 80a1144:	b08b      	sub	sp, #44	; 0x2c
 80a1146:	460c      	mov	r4, r1
  *str = '\0';
 80a1148:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a114c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a114e:	4625      	mov	r5, r4
 80a1150:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1154:	fb04 5312 	mls	r3, r4, r2, r5
 80a1158:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a115a:	2b09      	cmp	r3, #9
 80a115c:	bf94      	ite	ls
 80a115e:	3330      	addls	r3, #48	; 0x30
 80a1160:	3337      	addhi	r3, #55	; 0x37
 80a1162:	b2db      	uxtb	r3, r3
  } while(n);
 80a1164:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1166:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a116a:	d9f0      	bls.n	80a114e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a116c:	f7ff ffd2 	bl	80a1114 <_ZN5Print5writeEPKc>
}
 80a1170:	b00b      	add	sp, #44	; 0x2c
 80a1172:	bd30      	pop	{r4, r5, pc}

080a1174 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1174:	4770      	bx	lr

080a1176 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1176:	7441      	strb	r1, [r0, #17]
}
 80a1178:	4770      	bx	lr

080a117a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a117a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a117c:	7c00      	ldrb	r0, [r0, #16]
 80a117e:	f7ff f8f3 	bl	80a0368 <hal_usart_available_data_for_write>
}
 80a1182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1186:	bd08      	pop	{r3, pc}

080a1188 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1188:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a118a:	7c00      	ldrb	r0, [r0, #16]
 80a118c:	f7ff f8c4 	bl	80a0318 <hal_usart_available>
}
 80a1190:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1194:	bd08      	pop	{r3, pc}

080a1196 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1196:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1198:	7c00      	ldrb	r0, [r0, #16]
 80a119a:	f7ff f8cd 	bl	80a0338 <hal_usart_peek>
}
 80a119e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a11a2:	bd08      	pop	{r3, pc}

080a11a4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a11a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a11a6:	7c00      	ldrb	r0, [r0, #16]
 80a11a8:	f7ff f8be 	bl	80a0328 <hal_usart_read>
}
 80a11ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a11b0:	bd08      	pop	{r3, pc}

080a11b2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a11b2:	7c00      	ldrb	r0, [r0, #16]
 80a11b4:	f7ff b8c8 	b.w	80a0348 <hal_usart_flush>

080a11b8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a11b8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a11ba:	7c46      	ldrb	r6, [r0, #17]
{
 80a11bc:	4604      	mov	r4, r0
 80a11be:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a11c0:	b12e      	cbz	r6, 80a11ce <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a11c2:	4629      	mov	r1, r5
 80a11c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a11c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a11ca:	f7ff b89d 	b.w	80a0308 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a11ce:	7c00      	ldrb	r0, [r0, #16]
 80a11d0:	f7ff f8ca 	bl	80a0368 <hal_usart_available_data_for_write>
 80a11d4:	2800      	cmp	r0, #0
 80a11d6:	dcf4      	bgt.n	80a11c2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a11d8:	4630      	mov	r0, r6
 80a11da:	bd70      	pop	{r4, r5, r6, pc}

080a11dc <_ZN11USARTSerialD0Ev>:
 80a11dc:	b510      	push	{r4, lr}
 80a11de:	4604      	mov	r4, r0
 80a11e0:	2114      	movs	r1, #20
 80a11e2:	f000 f9d1 	bl	80a1588 <_ZdlPvj>
 80a11e6:	4620      	mov	r0, r4
 80a11e8:	bd10      	pop	{r4, pc}
	...

080a11ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a11ec:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a11f0:	b510      	push	{r4, lr}
 80a11f2:	4604      	mov	r4, r0
 80a11f4:	4608      	mov	r0, r1
 80a11f6:	4611      	mov	r1, r2
 80a11f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a11fc:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1200:	4a04      	ldr	r2, [pc, #16]	; (80a1214 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1202:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1204:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1206:	2201      	movs	r2, #1
 80a1208:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a120a:	461a      	mov	r2, r3
 80a120c:	f7ff f874 	bl	80a02f8 <hal_usart_init>
}
 80a1210:	4620      	mov	r0, r4
 80a1212:	bd10      	pop	{r4, pc}
 80a1214:	080a17b0 	.word	0x080a17b0

080a1218 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a121a:	4c1a      	ldr	r4, [pc, #104]	; (80a1284 <_Z22__fetch_global_Serial1v+0x6c>)
 80a121c:	6826      	ldr	r6, [r4, #0]
 80a121e:	b94e      	cbnz	r6, 80a1234 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a1220:	2084      	movs	r0, #132	; 0x84
 80a1222:	f7fe ff38 	bl	80a0096 <_Znwj>
 80a1226:	4605      	mov	r5, r0
 80a1228:	b118      	cbz	r0, 80a1232 <_Z22__fetch_global_Serial1v+0x1a>
 80a122a:	2284      	movs	r2, #132	; 0x84
 80a122c:	4631      	mov	r1, r6
 80a122e:	f000 f9cf 	bl	80a15d0 <memset>
 80a1232:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1234:	4d14      	ldr	r5, [pc, #80]	; (80a1288 <_Z22__fetch_global_Serial1v+0x70>)
 80a1236:	682f      	ldr	r7, [r5, #0]
 80a1238:	b94f      	cbnz	r7, 80a124e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a123a:	2084      	movs	r0, #132	; 0x84
 80a123c:	f7fe ff2b 	bl	80a0096 <_Znwj>
 80a1240:	4606      	mov	r6, r0
 80a1242:	b118      	cbz	r0, 80a124c <_Z22__fetch_global_Serial1v+0x34>
 80a1244:	2284      	movs	r2, #132	; 0x84
 80a1246:	4639      	mov	r1, r7
 80a1248:	f000 f9c2 	bl	80a15d0 <memset>
 80a124c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a124e:	4f0f      	ldr	r7, [pc, #60]	; (80a128c <_Z22__fetch_global_Serial1v+0x74>)
 80a1250:	7839      	ldrb	r1, [r7, #0]
 80a1252:	f3bf 8f5b 	dmb	ish
 80a1256:	f011 0601 	ands.w	r6, r1, #1
 80a125a:	d111      	bne.n	80a1280 <_Z22__fetch_global_Serial1v+0x68>
 80a125c:	4638      	mov	r0, r7
 80a125e:	f7fe ff20 	bl	80a00a2 <__cxa_guard_acquire>
 80a1262:	b168      	cbz	r0, 80a1280 <_Z22__fetch_global_Serial1v+0x68>
 80a1264:	4631      	mov	r1, r6
 80a1266:	6822      	ldr	r2, [r4, #0]
 80a1268:	682b      	ldr	r3, [r5, #0]
 80a126a:	4809      	ldr	r0, [pc, #36]	; (80a1290 <_Z22__fetch_global_Serial1v+0x78>)
 80a126c:	f7ff ffbe 	bl	80a11ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1270:	4638      	mov	r0, r7
 80a1272:	f7fe ff1b 	bl	80a00ac <__cxa_guard_release>
 80a1276:	4a07      	ldr	r2, [pc, #28]	; (80a1294 <_Z22__fetch_global_Serial1v+0x7c>)
 80a1278:	4907      	ldr	r1, [pc, #28]	; (80a1298 <_Z22__fetch_global_Serial1v+0x80>)
 80a127a:	4805      	ldr	r0, [pc, #20]	; (80a1290 <_Z22__fetch_global_Serial1v+0x78>)
 80a127c:	f000 f97f 	bl	80a157e <__aeabi_atexit>
#endif
	return serial1;
}
 80a1280:	4803      	ldr	r0, [pc, #12]	; (80a1290 <_Z22__fetch_global_Serial1v+0x78>)
 80a1282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1284:	200000f0 	.word	0x200000f0
 80a1288:	200000f4 	.word	0x200000f4
 80a128c:	200000ec 	.word	0x200000ec
 80a1290:	200000f8 	.word	0x200000f8
 80a1294:	20000068 	.word	0x20000068
 80a1298:	080a1175 	.word	0x080a1175

080a129c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a129c:	b510      	push	{r4, lr}
 80a129e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a12a0:	6800      	ldr	r0, [r0, #0]
 80a12a2:	b118      	cbz	r0, 80a12ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a12a4:	f7ff f946 	bl	80a0534 <free>
            wakeupSource_ = nullptr;
 80a12a8:	2300      	movs	r3, #0
 80a12aa:	6023      	str	r3, [r4, #0]
        }
    }
 80a12ac:	bd10      	pop	{r4, pc}

080a12ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a12ae:	b510      	push	{r4, lr}
 80a12b0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a12b2:	f7ff fff3 	bl	80a129c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a12b6:	4620      	mov	r0, r4
 80a12b8:	bd10      	pop	{r4, pc}

080a12ba <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a12ba:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80a12bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a12c0:	460d      	mov	r5, r1
        error_ = result.error_;
 80a12c2:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a12c4:	460b      	mov	r3, r1
 80a12c6:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a12ca:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80a12cc:	f8c0 2006 	str.w	r2, [r0, #6]
 80a12d0:	889b      	ldrh	r3, [r3, #4]
 80a12d2:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a12d4:	f7ff ffe2 	bl	80a129c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80a12d8:	682b      	ldr	r3, [r5, #0]
 80a12da:	b113      	cbz	r3, 80a12e2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80a12dc:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80a12de:	2300      	movs	r3, #0
 80a12e0:	602b      	str	r3, [r5, #0]
    }
 80a12e2:	4620      	mov	r0, r4
 80a12e4:	bd38      	pop	{r3, r4, r5, pc}

080a12e6 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 80a12e6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80a12ea:	b510      	push	{r4, lr}
 80a12ec:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 80a12ee:	b933      	cbnz	r3, 80a12fe <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80a12f0:	b932      	cbnz	r2, 80a1300 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 80a12f2:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80a12f6:	6003      	str	r3, [r0, #0]
 80a12f8:	888b      	ldrh	r3, [r1, #4]
 80a12fa:	8083      	strh	r3, [r0, #4]
    }
 80a12fc:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80a12fe:	b122      	cbz	r2, 80a130a <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80a1300:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80a1302:	2c01      	cmp	r4, #1
 80a1304:	d003      	beq.n	80a130e <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80a1306:	2c04      	cmp	r4, #4
 80a1308:	d006      	beq.n	80a1318 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a130a:	2204      	movs	r2, #4
 80a130c:	e005      	b.n	80a131a <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80a130e:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80a1310:	718c      	strb	r4, [r1, #6]
 80a1312:	810b      	strh	r3, [r1, #8]
 80a1314:	814a      	strh	r2, [r1, #10]
                    break;
 80a1316:	e7ec      	b.n	80a12f2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80a1318:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a131a:	810b      	strh	r3, [r1, #8]
 80a131c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1320:	718a      	strb	r2, [r1, #6]
 80a1322:	814b      	strh	r3, [r1, #10]
                    break;
 80a1324:	e7e5      	b.n	80a12f2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080a1326 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a1326:	b510      	push	{r4, lr}
 80a1328:	2400      	movs	r4, #0
 80a132a:	7004      	strb	r4, [r0, #0]
 80a132c:	8044      	strh	r4, [r0, #2]
 80a132e:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a1332:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a1334:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a1336:	dd08      	ble.n	80a134a <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 80a1338:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 80a133a:	428b      	cmp	r3, r1
 80a133c:	d904      	bls.n	80a1348 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 80a133e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a1342:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a1344:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 80a1346:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 80a1348:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 80a134a:	d101      	bne.n	80a1350 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a134c:	2302      	movs	r3, #2
 80a134e:	e7fa      	b.n	80a1346 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 80a1350:	8041      	strh	r1, [r0, #2]
 80a1352:	e7f9      	b.n	80a1348 <_ZN11SleepResultC1EiPKtj+0x22>

080a1354 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a1354:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1356:	460d      	mov	r5, r1
 80a1358:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a135a:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a135c:	b08b      	sub	sp, #44	; 0x2c
 80a135e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a1360:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a1362:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a1364:	9301      	str	r3, [sp, #4]
 80a1366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a1368:	4631      	mov	r1, r6
 80a136a:	9300      	str	r3, [sp, #0]
 80a136c:	4628      	mov	r0, r5
 80a136e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a1370:	9702      	str	r7, [sp, #8]
 80a1372:	f7ff f8cd 	bl	80a0510 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a1376:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a1378:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a137a:	462a      	mov	r2, r5
 80a137c:	a805      	add	r0, sp, #20
 80a137e:	f7ff ffd2 	bl	80a1326 <_ZN11SleepResultC1EiPKtj>
 80a1382:	4d0f      	ldr	r5, [pc, #60]	; (80a13c0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 80a1384:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80a1388:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80a138c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 80a1390:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80a1394:	4628      	mov	r0, r5
 80a1396:	a907      	add	r1, sp, #28
 80a1398:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80a139c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80a13a0:	9707      	str	r7, [sp, #28]
 80a13a2:	f8ad 7020 	strh.w	r7, [sp, #32]
 80a13a6:	f7ff ff88 	bl	80a12ba <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 80a13aa:	a807      	add	r0, sp, #28
 80a13ac:	f7ff ff76 	bl	80a129c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 80a13b0:	4620      	mov	r0, r4
 80a13b2:	4629      	mov	r1, r5
 80a13b4:	f7ff ff97 	bl	80a12e6 <_ZN17SystemSleepResult13toSleepResultEv>
}
 80a13b8:	4620      	mov	r0, r4
 80a13ba:	b00b      	add	sp, #44	; 0x2c
 80a13bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a13be:	bf00      	nop
 80a13c0:	2000010c 	.word	0x2000010c

080a13c4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a13c4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a13c6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a13c8:	b510      	push	{r4, lr}
 80a13ca:	4b08      	ldr	r3, [pc, #32]	; (80a13ec <_GLOBAL__sub_I_System+0x28>)
 80a13cc:	4c08      	ldr	r4, [pc, #32]	; (80a13f0 <_GLOBAL__sub_I_System+0x2c>)
 80a13ce:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a13d0:	4b08      	ldr	r3, [pc, #32]	; (80a13f4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a13d2:	6020      	str	r0, [r4, #0]
 80a13d4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a13d6:	71a0      	strb	r0, [r4, #6]
 80a13d8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a13da:	f7ff f865 	bl	80a04a8 <set_system_mode>
SystemClass System;
 80a13de:	4620      	mov	r0, r4
 80a13e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a13e4:	4a04      	ldr	r2, [pc, #16]	; (80a13f8 <_GLOBAL__sub_I_System+0x34>)
 80a13e6:	4905      	ldr	r1, [pc, #20]	; (80a13fc <_GLOBAL__sub_I_System+0x38>)
 80a13e8:	f000 b8c9 	b.w	80a157e <__aeabi_atexit>
 80a13ec:	20000118 	.word	0x20000118
 80a13f0:	2000010c 	.word	0x2000010c
 80a13f4:	ffff0000 	.word	0xffff0000
 80a13f8:	20000068 	.word	0x20000068
 80a13fc:	080a12af 	.word	0x080a12af

080a1400 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1400:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1402:	2600      	movs	r6, #0
 80a1404:	4604      	mov	r4, r0
 80a1406:	460d      	mov	r5, r1
 80a1408:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a140c:	f7fe ffb4 	bl	80a0378 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1410:	4628      	mov	r0, r5
    _spi = spi;
 80a1412:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1414:	f7fe ff60 	bl	80a02d8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1418:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a141a:	6066      	str	r6, [r4, #4]
}
 80a141c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1420 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1420:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a1422:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1424:	2520      	movs	r5, #32
 80a1426:	8043      	strh	r3, [r0, #2]
 80a1428:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a142a:	4e08      	ldr	r6, [pc, #32]	; (80a144c <_Z17acquireWireBufferv+0x2c>)
{
 80a142c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a142e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1430:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1432:	6085      	str	r5, [r0, #8]
 80a1434:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1436:	4628      	mov	r0, r5
 80a1438:	f000 f8a8 	bl	80a158c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a143c:	4631      	mov	r1, r6
	};
 80a143e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1440:	4628      	mov	r0, r5
 80a1442:	f000 f8a3 	bl	80a158c <_ZnajRKSt9nothrow_t>
	};
 80a1446:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a1448:	4620      	mov	r0, r4
 80a144a:	bd70      	pop	{r4, r5, r6, pc}
 80a144c:	080a17d8 	.word	0x080a17d8

080a1450 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1450:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1452:	4d0f      	ldr	r5, [pc, #60]	; (80a1490 <_Z19__fetch_global_Wirev+0x40>)
{
 80a1454:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1456:	7829      	ldrb	r1, [r5, #0]
 80a1458:	f3bf 8f5b 	dmb	ish
 80a145c:	f011 0401 	ands.w	r4, r1, #1
 80a1460:	d113      	bne.n	80a148a <_Z19__fetch_global_Wirev+0x3a>
 80a1462:	4628      	mov	r0, r5
 80a1464:	f7fe fe1d 	bl	80a00a2 <__cxa_guard_acquire>
 80a1468:	b178      	cbz	r0, 80a148a <_Z19__fetch_global_Wirev+0x3a>
 80a146a:	a801      	add	r0, sp, #4
 80a146c:	f7ff ffd8 	bl	80a1420 <_Z17acquireWireBufferv>
 80a1470:	4621      	mov	r1, r4
 80a1472:	aa01      	add	r2, sp, #4
 80a1474:	4807      	ldr	r0, [pc, #28]	; (80a1494 <_Z19__fetch_global_Wirev+0x44>)
 80a1476:	f7ff f98d 	bl	80a0794 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a147a:	4628      	mov	r0, r5
 80a147c:	f7fe fe16 	bl	80a00ac <__cxa_guard_release>
 80a1480:	4a05      	ldr	r2, [pc, #20]	; (80a1498 <_Z19__fetch_global_Wirev+0x48>)
 80a1482:	4906      	ldr	r1, [pc, #24]	; (80a149c <_Z19__fetch_global_Wirev+0x4c>)
 80a1484:	4803      	ldr	r0, [pc, #12]	; (80a1494 <_Z19__fetch_global_Wirev+0x44>)
 80a1486:	f000 f87a 	bl	80a157e <__aeabi_atexit>
	return wire;
}
 80a148a:	4802      	ldr	r0, [pc, #8]	; (80a1494 <_Z19__fetch_global_Wirev+0x44>)
 80a148c:	b007      	add	sp, #28
 80a148e:	bd30      	pop	{r4, r5, pc}
 80a1490:	2000011c 	.word	0x2000011c
 80a1494:	20000120 	.word	0x20000120
 80a1498:	20000068 	.word	0x20000068
 80a149c:	080a073d 	.word	0x080a073d

080a14a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a14a0:	2300      	movs	r3, #0
 80a14a2:	b513      	push	{r0, r1, r4, lr}
 80a14a4:	4c07      	ldr	r4, [pc, #28]	; (80a14c4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a14a6:	461a      	mov	r2, r3
 80a14a8:	4619      	mov	r1, r3
 80a14aa:	4620      	mov	r0, r4
 80a14ac:	9300      	str	r3, [sp, #0]
 80a14ae:	f7ff fa8b 	bl	80a09c8 <_ZN9IPAddressC1Ehhhh>
 80a14b2:	4620      	mov	r0, r4
 80a14b4:	4a04      	ldr	r2, [pc, #16]	; (80a14c8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a14b6:	4905      	ldr	r1, [pc, #20]	; (80a14cc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a14b8:	b002      	add	sp, #8
 80a14ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14be:	f000 b85e 	b.w	80a157e <__aeabi_atexit>
 80a14c2:	bf00      	nop
 80a14c4:	20000134 	.word	0x20000134
 80a14c8:	20000068 	.word	0x20000068
 80a14cc:	080a0919 	.word	0x080a0919

080a14d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a14d0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a14d2:	b570      	push	{r4, r5, r6, lr}
 80a14d4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a14d6:	d901      	bls.n	80a14dc <pinAvailable+0xc>
    return false;
 80a14d8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a14da:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a14dc:	f1a0 030d 	sub.w	r3, r0, #13
 80a14e0:	2b02      	cmp	r3, #2
 80a14e2:	d90b      	bls.n	80a14fc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a14e4:	2801      	cmp	r0, #1
 80a14e6:	d826      	bhi.n	80a1536 <pinAvailable+0x66>
 80a14e8:	f7ff ffb2 	bl	80a1450 <_Z19__fetch_global_Wirev>
 80a14ec:	2100      	movs	r1, #0
 80a14ee:	7c00      	ldrb	r0, [r0, #16]
 80a14f0:	f7fe fee0 	bl	80a02b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a14f4:	f080 0001 	eor.w	r0, r0, #1
 80a14f8:	b2c0      	uxtb	r0, r0
 80a14fa:	e7ee      	b.n	80a14da <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a14fc:	4e13      	ldr	r6, [pc, #76]	; (80a154c <pinAvailable+0x7c>)
 80a14fe:	7831      	ldrb	r1, [r6, #0]
 80a1500:	f3bf 8f5b 	dmb	ish
 80a1504:	f011 0501 	ands.w	r5, r1, #1
 80a1508:	d10f      	bne.n	80a152a <pinAvailable+0x5a>
 80a150a:	4630      	mov	r0, r6
 80a150c:	f7fe fdc9 	bl	80a00a2 <__cxa_guard_acquire>
 80a1510:	b158      	cbz	r0, 80a152a <pinAvailable+0x5a>
 80a1512:	4629      	mov	r1, r5
 80a1514:	480e      	ldr	r0, [pc, #56]	; (80a1550 <pinAvailable+0x80>)
 80a1516:	f7ff ff73 	bl	80a1400 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a151a:	4630      	mov	r0, r6
 80a151c:	f7fe fdc6 	bl	80a00ac <__cxa_guard_release>
 80a1520:	4a0c      	ldr	r2, [pc, #48]	; (80a1554 <pinAvailable+0x84>)
 80a1522:	490d      	ldr	r1, [pc, #52]	; (80a1558 <pinAvailable+0x88>)
 80a1524:	480a      	ldr	r0, [pc, #40]	; (80a1550 <pinAvailable+0x80>)
 80a1526:	f000 f82a 	bl	80a157e <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a152a:	4b09      	ldr	r3, [pc, #36]	; (80a1550 <pinAvailable+0x80>)
 80a152c:	7818      	ldrb	r0, [r3, #0]
 80a152e:	f7fe fedb 	bl	80a02e8 <hal_spi_is_enabled>
 80a1532:	2800      	cmp	r0, #0
 80a1534:	d1d0      	bne.n	80a14d8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1536:	3c12      	subs	r4, #18
 80a1538:	2c01      	cmp	r4, #1
 80a153a:	d805      	bhi.n	80a1548 <pinAvailable+0x78>
 80a153c:	f7ff fe6c 	bl	80a1218 <_Z22__fetch_global_Serial1v>
 80a1540:	7c00      	ldrb	r0, [r0, #16]
 80a1542:	f7fe ff09 	bl	80a0358 <hal_usart_is_enabled>
 80a1546:	e7d5      	b.n	80a14f4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1548:	2001      	movs	r0, #1
 80a154a:	e7c6      	b.n	80a14da <pinAvailable+0xa>
 80a154c:	2000007c 	.word	0x2000007c
 80a1550:	20000080 	.word	0x20000080
 80a1554:	20000068 	.word	0x20000068
 80a1558:	080a01e5 	.word	0x080a01e5

080a155c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a155c:	2817      	cmp	r0, #23
{
 80a155e:	b538      	push	{r3, r4, r5, lr}
 80a1560:	4604      	mov	r4, r0
 80a1562:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1564:	d80a      	bhi.n	80a157c <pinMode+0x20>
 80a1566:	29ff      	cmp	r1, #255	; 0xff
 80a1568:	d008      	beq.n	80a157c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a156a:	f7ff ffb1 	bl	80a14d0 <pinAvailable>
 80a156e:	b128      	cbz	r0, 80a157c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1570:	4629      	mov	r1, r5
 80a1572:	4620      	mov	r0, r4
}
 80a1574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1578:	f7fe bf26 	b.w	80a03c8 <HAL_Pin_Mode>
}
 80a157c:	bd38      	pop	{r3, r4, r5, pc}

080a157e <__aeabi_atexit>:
 80a157e:	460b      	mov	r3, r1
 80a1580:	4601      	mov	r1, r0
 80a1582:	4618      	mov	r0, r3
 80a1584:	f000 b808 	b.w	80a1598 <__cxa_atexit>

080a1588 <_ZdlPvj>:
 80a1588:	f7fe bd89 	b.w	80a009e <_ZdlPv>

080a158c <_ZnajRKSt9nothrow_t>:
 80a158c:	f7fe bd85 	b.w	80a009a <_Znaj>

080a1590 <_ZSt25__throw_bad_function_callv>:
 80a1590:	b508      	push	{r3, lr}
 80a1592:	f7fe ffd7 	bl	80a0544 <abort>
	...

080a1598 <__cxa_atexit>:
 80a1598:	b510      	push	{r4, lr}
 80a159a:	4604      	mov	r4, r0
 80a159c:	4804      	ldr	r0, [pc, #16]	; (80a15b0 <__cxa_atexit+0x18>)
 80a159e:	4613      	mov	r3, r2
 80a15a0:	b120      	cbz	r0, 80a15ac <__cxa_atexit+0x14>
 80a15a2:	460a      	mov	r2, r1
 80a15a4:	2002      	movs	r0, #2
 80a15a6:	4621      	mov	r1, r4
 80a15a8:	f3af 8000 	nop.w
 80a15ac:	bd10      	pop	{r4, pc}
 80a15ae:	bf00      	nop
 80a15b0:	00000000 	.word	0x00000000

080a15b4 <memcpy>:
 80a15b4:	440a      	add	r2, r1
 80a15b6:	4291      	cmp	r1, r2
 80a15b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a15bc:	d100      	bne.n	80a15c0 <memcpy+0xc>
 80a15be:	4770      	bx	lr
 80a15c0:	b510      	push	{r4, lr}
 80a15c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a15c6:	4291      	cmp	r1, r2
 80a15c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a15cc:	d1f9      	bne.n	80a15c2 <memcpy+0xe>
 80a15ce:	bd10      	pop	{r4, pc}

080a15d0 <memset>:
 80a15d0:	4603      	mov	r3, r0
 80a15d2:	4402      	add	r2, r0
 80a15d4:	4293      	cmp	r3, r2
 80a15d6:	d100      	bne.n	80a15da <memset+0xa>
 80a15d8:	4770      	bx	lr
 80a15da:	f803 1b01 	strb.w	r1, [r3], #1
 80a15de:	e7f9      	b.n	80a15d4 <memset+0x4>

080a15e0 <srand>:
 80a15e0:	b538      	push	{r3, r4, r5, lr}
 80a15e2:	4b0d      	ldr	r3, [pc, #52]	; (80a1618 <srand+0x38>)
 80a15e4:	4604      	mov	r4, r0
 80a15e6:	681d      	ldr	r5, [r3, #0]
 80a15e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a15ea:	b97b      	cbnz	r3, 80a160c <srand+0x2c>
 80a15ec:	2018      	movs	r0, #24
 80a15ee:	f7fe ff99 	bl	80a0524 <malloc>
 80a15f2:	4a0a      	ldr	r2, [pc, #40]	; (80a161c <srand+0x3c>)
 80a15f4:	4b0a      	ldr	r3, [pc, #40]	; (80a1620 <srand+0x40>)
 80a15f6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a15f8:	e9c0 2300 	strd	r2, r3, [r0]
 80a15fc:	4b09      	ldr	r3, [pc, #36]	; (80a1624 <srand+0x44>)
 80a15fe:	2201      	movs	r2, #1
 80a1600:	6083      	str	r3, [r0, #8]
 80a1602:	230b      	movs	r3, #11
 80a1604:	8183      	strh	r3, [r0, #12]
 80a1606:	2300      	movs	r3, #0
 80a1608:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a160c:	2200      	movs	r2, #0
 80a160e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1610:	611c      	str	r4, [r3, #16]
 80a1612:	615a      	str	r2, [r3, #20]
 80a1614:	bd38      	pop	{r3, r4, r5, pc}
 80a1616:	bf00      	nop
 80a1618:	20000004 	.word	0x20000004
 80a161c:	abcd330e 	.word	0xabcd330e
 80a1620:	e66d1234 	.word	0xe66d1234
 80a1624:	0005deec 	.word	0x0005deec

080a1628 <strdup>:
 80a1628:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <strdup+0xc>)
 80a162a:	4601      	mov	r1, r0
 80a162c:	6818      	ldr	r0, [r3, #0]
 80a162e:	f000 b803 	b.w	80a1638 <_strdup_r>
 80a1632:	bf00      	nop
 80a1634:	20000004 	.word	0x20000004

080a1638 <_strdup_r>:
 80a1638:	b570      	push	{r4, r5, r6, lr}
 80a163a:	4604      	mov	r4, r0
 80a163c:	4608      	mov	r0, r1
 80a163e:	460d      	mov	r5, r1
 80a1640:	f000 f80d 	bl	80a165e <strlen>
 80a1644:	1c46      	adds	r6, r0, #1
 80a1646:	4631      	mov	r1, r6
 80a1648:	4620      	mov	r0, r4
 80a164a:	f7fe ff83 	bl	80a0554 <_malloc_r>
 80a164e:	4604      	mov	r4, r0
 80a1650:	b118      	cbz	r0, 80a165a <_strdup_r+0x22>
 80a1652:	4632      	mov	r2, r6
 80a1654:	4629      	mov	r1, r5
 80a1656:	f7ff ffad 	bl	80a15b4 <memcpy>
 80a165a:	4620      	mov	r0, r4
 80a165c:	bd70      	pop	{r4, r5, r6, pc}

080a165e <strlen>:
 80a165e:	4603      	mov	r3, r0
 80a1660:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1664:	2a00      	cmp	r2, #0
 80a1666:	d1fb      	bne.n	80a1660 <strlen+0x2>
 80a1668:	1a18      	subs	r0, r3, r0
 80a166a:	3801      	subs	r0, #1
 80a166c:	4770      	bx	lr

080a166e <link_code_end>:
	...

080a1670 <dynalib_user>:
 80a1670:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1680:	0000 0000 7453 7461 0065 6c53 6565 0070     ....State.Sleep.
 80a1690:	4e4f 4f00 4646 0000                         ON.OFF..

080a1698 <_ZTVN5spark12NetworkClassE>:
	...
 80a16a0:	0587 080a 0591 080a 059b 080a 05a5 080a     ................
 80a16b0:	05af 080a 05bb 080a 05c7 080a 05d3 080a     ................
 80a16c0:	05db 080a 05e5 080a 05f1 080a               ............

080a16cc <_ZTVN5spark9WiFiClassE>:
	...
 80a16d4:	06f7 080a 06ed 080a 06e3 080a 0655 080a     ............U...
 80a16e4:	06d7 080a 06cb 080a 06bf 080a 06b7 080a     ................
 80a16f4:	06ad 080a 06a3 080a 065f 080a               ........_...

080a1700 <_ZTV7TwoWire>:
	...
 80a1708:	073d 080a 0787 080a 075f 080a 073f 080a     =......._...?...
 80a1718:	0767 080a 076f 080a 0777 080a 077f 080a     g...o...w.......

080a1728 <_ZTV9USBSerial>:
	...
 80a1730:	07bd 080a 0823 080a 07fb 080a 10e9 080a     ....#...........
 80a1740:	07ed 080a 07bf 080a 07cf 080a 081d 080a     ................
 80a1750:	07df 080a 07b9 080a                         ........

080a1758 <_ZTV9IPAddress>:
	...
 80a1760:	0929 080a 0919 080a 091b 080a               )...........

080a176c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1774:	09e1 080a 09e7 080a 0a25 080a 09f5 080a     ........%.......
 80a1784:	09e3 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a1794:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
 80a17a4:	7061 0070                                   app.

080a17a8 <_ZTV11USARTSerial>:
	...
 80a17b0:	1175 080a 11dd 080a 11b9 080a 10e9 080a     u...............
 80a17c0:	1189 080a 11a5 080a 1197 080a 11b3 080a     ................
 80a17d0:	1177 080a 117b 080a                         w...{...

080a17d8 <_ZSt7nothrow>:
 80a17d8:	0000 0000                                   ....

080a17dc <__sf_fake_stderr>:
	...

080a17fc <__sf_fake_stdin>:
	...

080a181c <__sf_fake_stdout>:
	...

080a183c <link_const_variable_data_end>:
 80a183c:	080a01cd 	.word	0x080a01cd
 80a1840:	080a0641 	.word	0x080a0641
 80a1844:	080a0701 	.word	0x080a0701
 80a1848:	080a10a1 	.word	0x080a10a1
 80a184c:	080a10c5 	.word	0x080a10c5
 80a1850:	080a10d9 	.word	0x080a10d9
 80a1854:	080a13c5 	.word	0x080a13c5
 80a1858:	080a14a1 	.word	0x080a14a1

080a185c <link_constructors_end>:
 80a185c:	00000000 	.word	0x00000000
