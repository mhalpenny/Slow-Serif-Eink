
x:/Developer/Particle/eink-project/target/2.0.1/photon/eink-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001844  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1860  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000e8  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a18cc  080a18cc  000218cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a18f4  080a18f4  000218f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00120dc7  00000000  00000000  000218f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000148a1  00000000  00000000  001426bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019b87  00000000  00000000  00156f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f78  00000000  00000000  00170ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004f90  00000000  00000000  00172a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002992c  00000000  00000000  001779ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d399  00000000  00000000  001a131b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5e49  00000000  00000000  001ce6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005098  00000000  00000000  00284500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
 80a0020:	b508      	push	{r3, lr}
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fac1 	bl	80a15b4 <memcpy>
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fac9 	bl	80a15d0 <memset>
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1864 	.word	0x080a1864
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000150 	.word	0x20000150
 80a0058:	20000150 	.word	0x20000150

080a005c <module_user_init>:
 80a005c:	b570      	push	{r4, r5, r6, lr}
 80a005e:	f000 fc57 	bl	80a0910 <module_user_init_hook>
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a183c 	.word	0x080a183c
 80a0080:	080a185c 	.word	0x080a185c

080a0084 <module_user_setup>:
 80a0084:	f000 b830 	b.w	80a00e8 <setup>

080a0088 <module_user_loop>:
 80a0088:	b508      	push	{r3, lr}
 80a008a:	f000 f84b 	bl	80a0124 <loop>
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0092:	f000 bbff 	b.w	80a0894 <_post_loop>

080a0096 <_Znwj>:
 80a0096:	f000 ba45 	b.w	80a0524 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 ba43 	b.w	80a0524 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 ba49 	b.w	80a0534 <free>

080a00a2 <__cxa_guard_acquire>:
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_Z16startupFunctionsv>:
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a00b2:	2101      	movs	r1, #1
 80a00b4:	4608      	mov	r0, r1
 80a00b6:	f000 b8b5 	b.w	80a0224 <HAL_Feature_Set>

080a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00ba:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00bc:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00be:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00c0:	b17c      	cbz	r4, 80a00e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00c2:	6863      	ldr	r3, [r4, #4]
 80a00c4:	3b01      	subs	r3, #1
 80a00c6:	6063      	str	r3, [r4, #4]
 80a00c8:	b95b      	cbnz	r3, 80a00e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00ca:	6823      	ldr	r3, [r4, #0]
 80a00cc:	4620      	mov	r0, r4
 80a00ce:	689b      	ldr	r3, [r3, #8]
 80a00d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00d2:	68a3      	ldr	r3, [r4, #8]
 80a00d4:	3b01      	subs	r3, #1
 80a00d6:	60a3      	str	r3, [r4, #8]
 80a00d8:	b91b      	cbnz	r3, 80a00e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00da:	6823      	ldr	r3, [r4, #0]
 80a00dc:	4620      	mov	r0, r4
 80a00de:	68db      	ldr	r3, [r3, #12]
 80a00e0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00e2:	4628      	mov	r0, r5
 80a00e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00e8 <setup>:
    //SYSTEM_MODE(MANUAL);
}

//SystemSleepConfiguration config;

void setup() {
 80a00e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a00ea:	4b0a      	ldr	r3, [pc, #40]	; (80a0114 <setup+0x2c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00ec:	4a0a      	ldr	r2, [pc, #40]	; (80a0118 <setup+0x30>)
 80a00ee:	781b      	ldrb	r3, [r3, #0]
 80a00f0:	490a      	ldr	r1, [pc, #40]	; (80a011c <setup+0x34>)
 80a00f2:	f88d 3000 	strb.w	r3, [sp]
 80a00f6:	a802      	add	r0, sp, #8
 80a00f8:	2300      	movs	r3, #0
 80a00fa:	f000 fd61 	bl	80a0bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a00fe:	a803      	add	r0, sp, #12
 80a0100:	f7ff ffdb 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    Particle.publish("Sleep", "State", 0, PUBLIC);
    //Particle.publish("Switch", "Value", 0, PUBLIC);
    pinMode(wakeUpSwitch, INPUT_PULLDOWN);
 80a0104:	4b06      	ldr	r3, [pc, #24]	; (80a0120 <setup+0x38>)
 80a0106:	2103      	movs	r1, #3
 80a0108:	8818      	ldrh	r0, [r3, #0]
 80a010a:	f001 f9cf 	bl	80a14ac <pinMode>
    
}
 80a010e:	b005      	add	sp, #20
 80a0110:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0114:	20000070 	.word	0x20000070
 80a0118:	080a1684 	.word	0x080a1684
 80a011c:	080a168a 	.word	0x080a168a
 80a0120:	20000078 	.word	0x20000078

080a0124 <loop>:

void loop() {
 80a0124:	b570      	push	{r4, r5, r6, lr}
    //refresh e-ink via SPI
    
//--- END NOT IN USE -----------
            
            //RESET SLEEP VARIABLE
    		sleepMode = 0;
 80a0126:	2500      	movs	r5, #0
 80a0128:	4e21      	ldr	r6, [pc, #132]	; (80a01b0 <loop+0x8c>)
void loop() {
 80a012a:	b088      	sub	sp, #32
 80a012c:	7833      	ldrb	r3, [r6, #0]
    		sleepMode = 0;
 80a012e:	4c21      	ldr	r4, [pc, #132]	; (80a01b4 <loop+0x90>)
 80a0130:	4a21      	ldr	r2, [pc, #132]	; (80a01b8 <loop+0x94>)
 80a0132:	4922      	ldr	r1, [pc, #136]	; (80a01bc <loop+0x98>)
 80a0134:	f88d 3000 	strb.w	r3, [sp]
 80a0138:	a806      	add	r0, sp, #24
 80a013a:	233c      	movs	r3, #60	; 0x3c
 80a013c:	6025      	str	r5, [r4, #0]
 80a013e:	f000 fd3f 	bl	80a0bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0142:	a807      	add	r0, sp, #28
 80a0144:	f7ff ffb9 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			Particle.publish("Sleep", sleepMode ? "ON" : "OFF");
			delay(3000);
 80a0148:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a014c:	f000 fb3a 	bl	80a07c4 <delay>
     
            //START SLEEP VARIABLE
            sleepMode = !sleepMode;
 80a0150:	6823      	ldr	r3, [r4, #0]
 80a0152:	491b      	ldr	r1, [pc, #108]	; (80a01c0 <loop+0x9c>)
 80a0154:	42ab      	cmp	r3, r5
 80a0156:	bf0c      	ite	eq
 80a0158:	2301      	moveq	r3, #1
 80a015a:	462b      	movne	r3, r5
 80a015c:	6023      	str	r3, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a015e:	7833      	ldrb	r3, [r6, #0]
 80a0160:	4a15      	ldr	r2, [pc, #84]	; (80a01b8 <loop+0x94>)
 80a0162:	f88d 3000 	strb.w	r3, [sp]
 80a0166:	bf08      	it	eq
 80a0168:	460a      	moveq	r2, r1
 80a016a:	233c      	movs	r3, #60	; 0x3c
 80a016c:	4913      	ldr	r1, [pc, #76]	; (80a01bc <loop+0x98>)
 80a016e:	a806      	add	r0, sp, #24
 80a0170:	f000 fd26 	bl	80a0bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0174:	a807      	add	r0, sp, #28
 80a0176:	f7ff ffa0 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Particle.publish("Sleep", sleepMode ? "ON" : "OFF");
			delay(3000);
 80a017a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a017e:	f000 fb21 	bl	80a07c4 <delay>
			//STOP SLEEP System.sleep(pin, edge, timeout)
            //System.sleep(uint16_t wakeupPin, uint16_t CHANGE, DAY_CYCLE);
            //System.sleep(uint16_t wakeUpPin, uint16_t edgeTriggerMode);
           
           //SLEEP STOP
           System.sleep(wakeUpSwitch, FALLING);
 80a0182:	4a10      	ldr	r2, [pc, #64]	; (80a01c4 <loop+0xa0>)
 80a0184:	4b10      	ldr	r3, [pc, #64]	; (80a01c8 <loop+0xa4>)
 80a0186:	8812      	ldrh	r2, [r2, #0]
 80a0188:	681b      	ldr	r3, [r3, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
 80a018a:	f8ad 2016 	strh.w	r2, [sp, #22]
 80a018e:	2202      	movs	r2, #2
 80a0190:	f88d 2015 	strb.w	r2, [sp, #21]
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 80a0194:	2201      	movs	r2, #1
 80a0196:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80a019a:	9200      	str	r2, [sp, #0]
 80a019c:	f10d 0315 	add.w	r3, sp, #21
 80a01a0:	f10d 0116 	add.w	r1, sp, #22
 80a01a4:	a806      	add	r0, sp, #24
 80a01a6:	f000 fa51 	bl	80a064c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
           
           //POST-SLEEP

 80a01aa:	b008      	add	sp, #32
 80a01ac:	bd70      	pop	{r4, r5, r6, pc}
 80a01ae:	bf00      	nop
 80a01b0:	20000070 	.word	0x20000070
 80a01b4:	20000074 	.word	0x20000074
 80a01b8:	080a1693 	.word	0x080a1693
 80a01bc:	080a168a 	.word	0x080a168a
 80a01c0:	080a1690 	.word	0x080a1690
 80a01c4:	20000078 	.word	0x20000078
 80a01c8:	2000006c 	.word	0x2000006c

080a01cc <_GLOBAL__sub_I_firstAvailable>:
        val_(val) {
 80a01cc:	2300      	movs	r3, #0
 80a01ce:	4a03      	ldr	r2, [pc, #12]	; (80a01dc <_GLOBAL__sub_I_firstAvailable+0x10>)
 80a01d0:	6013      	str	r3, [r2, #0]
 80a01d2:	4a03      	ldr	r2, [pc, #12]	; (80a01e0 <_GLOBAL__sub_I_firstAvailable+0x14>)
 80a01d4:	7013      	strb	r3, [r2, #0]
STARTUP(startupFunctions());
 80a01d6:	f7ff bf6c 	b.w	80a00b2 <_Z16startupFunctionsv>
 80a01da:	bf00      	nop
 80a01dc:	2000006c 	.word	0x2000006c
 80a01e0:	20000070 	.word	0x20000070

080a01e4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a01e4:	b510      	push	{r4, lr}
 80a01e6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a01e8:	6880      	ldr	r0, [r0, #8]
 80a01ea:	b108      	cbz	r0, 80a01f0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a01ec:	f000 f82a 	bl	80a0244 <os_mutex_recursive_destroy>
 80a01f0:	4620      	mov	r0, r4
 80a01f2:	bd10      	pop	{r4, pc}

080a01f4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <HAL_Pin_Mode+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	689b      	ldr	r3, [r3, #8]
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	080601b0 	.word	0x080601b0

080a0204 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <HAL_RNG_GetRandomNumber+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	685b      	ldr	r3, [r3, #4]
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	0806019c 	.word	0x0806019c

080a0214 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	695b      	ldr	r3, [r3, #20]
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	0806019c 	.word	0x0806019c

080a0224 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <HAL_Feature_Set+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	080601b8 	.word	0x080601b8

080a0234 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <os_mutex_recursive_create+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601d0 	.word	0x080601d0

080a0244 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <os_mutex_recursive_destroy+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601d0 	.word	0x080601d0

080a0254 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <hal_usart_init+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	699b      	ldr	r3, [r3, #24]
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601c4 	.word	0x080601c4

080a0264 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <hal_usart_write+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601c4 	.word	0x080601c4

080a0274 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <hal_usart_available+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601c4 	.word	0x080601c4

080a0284 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <hal_usart_read+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601c4 	.word	0x080601c4

080a0294 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <hal_usart_peek+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601c4 	.word	0x080601c4

080a02a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <hal_usart_flush+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601c4 	.word	0x080601c4

080a02b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <hal_usart_is_enabled+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601c4 	.word	0x080601c4

080a02c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <hal_usart_available_data_for_write+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601c4 	.word	0x080601c4

080a02d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <hal_i2c_write+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601ac 	.word	0x080601ac

080a02e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <hal_i2c_available+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601ac 	.word	0x080601ac

080a02f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <hal_i2c_read+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601ac 	.word	0x080601ac

080a0304 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <hal_i2c_peek+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601ac 	.word	0x080601ac

080a0314 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <hal_i2c_flush+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601ac 	.word	0x080601ac

080a0324 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <hal_i2c_is_enabled+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601ac 	.word	0x080601ac

080a0334 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b03      	ldr	r3, [pc, #12]	; (80a0344 <hal_i2c_init+0x10>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a033e:	9301      	str	r3, [sp, #4]
 80a0340:	bd08      	pop	{r3, pc}
 80a0342:	0000      	.short	0x0000
 80a0344:	080601ac 	.word	0x080601ac

080a0348 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <hal_spi_init+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	69db      	ldr	r3, [r3, #28]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601b4 	.word	0x080601b4

080a0358 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <hal_spi_is_enabled+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	6a1b      	ldr	r3, [r3, #32]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601b4 	.word	0x080601b4

080a0368 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_USB_USART_Init+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	681b      	ldr	r3, [r3, #0]
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601d8 	.word	0x080601d8

080a0378 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_USB_USART_Available_Data+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	691b      	ldr	r3, [r3, #16]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601d8 	.word	0x080601d8

080a0388 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	695b      	ldr	r3, [r3, #20]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601d8 	.word	0x080601d8

080a0398 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_USB_USART_Receive_Data+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	699b      	ldr	r3, [r3, #24]
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601d8 	.word	0x080601d8

080a03a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_USB_USART_Send_Data+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	69db      	ldr	r3, [r3, #28]
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601d8 	.word	0x080601d8

080a03b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <HAL_USB_USART_Flush_Data+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6a1b      	ldr	r3, [r3, #32]
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601d8 	.word	0x080601d8

080a03c8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <inet_gethostbyname+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601c0 	.word	0x080601c0

080a03d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <set_system_mode+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	685b      	ldr	r3, [r3, #4]
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601a4 	.word	0x080601a4

080a03e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <system_delay_ms+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	695b      	ldr	r3, [r3, #20]
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601a4 	.word	0x080601a4

080a03f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <application_thread_current+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601a4 	.word	0x080601a4

080a0408 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <application_thread_invoke+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601a4 	.word	0x080601a4

080a0418 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0418:	b508      	push	{r3, lr}
 80a041a:	4b03      	ldr	r3, [pc, #12]	; (80a0428 <system_ctrl_set_app_request_handler+0x10>)
 80a041c:	681b      	ldr	r3, [r3, #0]
 80a041e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0422:	9301      	str	r3, [sp, #4]
 80a0424:	bd08      	pop	{r3, pc}
 80a0426:	0000      	.short	0x0000
 80a0428:	080601a4 	.word	0x080601a4

080a042c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b03      	ldr	r3, [pc, #12]	; (80a043c <system_ctrl_set_result+0x10>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0436:	9301      	str	r3, [sp, #4]
 80a0438:	bd08      	pop	{r3, pc}
 80a043a:	0000      	.short	0x0000
 80a043c:	080601a4 	.word	0x080601a4

080a0440 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b03      	ldr	r3, [pc, #12]	; (80a0450 <system_sleep_pins+0x10>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a044a:	9301      	str	r3, [sp, #4]
 80a044c:	bd08      	pop	{r3, pc}
 80a044e:	0000      	.short	0x0000
 80a0450:	080601a4 	.word	0x080601a4

080a0454 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <network_connect+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	685b      	ldr	r3, [r3, #4]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c8 	.word	0x080601c8

080a0464 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <network_connecting+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	689b      	ldr	r3, [r3, #8]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601c8 	.word	0x080601c8

080a0474 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <network_disconnect+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	68db      	ldr	r3, [r3, #12]
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601c8 	.word	0x080601c8

080a0484 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <network_ready+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	691b      	ldr	r3, [r3, #16]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601c8 	.word	0x080601c8

080a0494 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <network_on+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	695b      	ldr	r3, [r3, #20]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601c8 	.word	0x080601c8

080a04a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <network_off+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	699b      	ldr	r3, [r3, #24]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601c8 	.word	0x080601c8

080a04b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <network_listen+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	69db      	ldr	r3, [r3, #28]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601c8 	.word	0x080601c8

080a04c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <network_listening+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	6a1b      	ldr	r3, [r3, #32]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601c8 	.word	0x080601c8

080a04d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <network_set_listen_timeout+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601c8 	.word	0x080601c8

080a04e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <network_get_listen_timeout+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601c8 	.word	0x080601c8

080a04f4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <spark_cloud_flag_connected+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	695b      	ldr	r3, [r3, #20]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601cc 	.word	0x080601cc

080a0504 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <spark_send_event+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	6a1b      	ldr	r3, [r3, #32]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601cc 	.word	0x080601cc

080a0514 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601cc 	.word	0x080601cc

080a0524 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <malloc+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	681b      	ldr	r3, [r3, #0]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601a0 	.word	0x080601a0

080a0534 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <free+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	685b      	ldr	r3, [r3, #4]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601a0 	.word	0x080601a0

080a0544 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <abort+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601a0 	.word	0x080601a0

080a0554 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <_malloc_r+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601a0 	.word	0x080601a0

080a0564 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <newlib_impure_ptr_callback+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601a0 	.word	0x080601a0

080a0574 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0574:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0576:	2600      	movs	r6, #0
 80a0578:	4604      	mov	r4, r0
 80a057a:	460d      	mov	r5, r1
 80a057c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0580:	f7ff fe58 	bl	80a0234 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0584:	4628      	mov	r0, r5
    _spi = spi;
 80a0586:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0588:	f7ff fede 	bl	80a0348 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a058c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a058e:	6066      	str	r6, [r4, #4]
}
 80a0590:	bd70      	pop	{r4, r5, r6, pc}

080a0592 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0592:	b510      	push	{r4, lr}
 80a0594:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0596:	6800      	ldr	r0, [r0, #0]
 80a0598:	b118      	cbz	r0, 80a05a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a059a:	f7ff ffcb 	bl	80a0534 <free>
            wakeupSource_ = nullptr;
 80a059e:	2300      	movs	r3, #0
 80a05a0:	6023      	str	r3, [r4, #0]
        }
    }
 80a05a2:	bd10      	pop	{r4, pc}

080a05a4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a05a4:	b510      	push	{r4, lr}
 80a05a6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a05a8:	f7ff fff3 	bl	80a0592 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a05ac:	4620      	mov	r0, r4
 80a05ae:	bd10      	pop	{r4, pc}

080a05b0 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a05b0:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80a05b2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a05b6:	460d      	mov	r5, r1
        error_ = result.error_;
 80a05b8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a05ba:	460b      	mov	r3, r1
 80a05bc:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a05c0:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80a05c2:	f8c0 2006 	str.w	r2, [r0, #6]
 80a05c6:	889b      	ldrh	r3, [r3, #4]
 80a05c8:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a05ca:	f7ff ffe2 	bl	80a0592 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80a05ce:	682b      	ldr	r3, [r5, #0]
 80a05d0:	b113      	cbz	r3, 80a05d8 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80a05d2:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80a05d4:	2300      	movs	r3, #0
 80a05d6:	602b      	str	r3, [r5, #0]
    }
 80a05d8:	4620      	mov	r0, r4
 80a05da:	bd38      	pop	{r3, r4, r5, pc}

080a05dc <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 80a05dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80a05e0:	b510      	push	{r4, lr}
 80a05e2:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 80a05e4:	b933      	cbnz	r3, 80a05f4 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80a05e6:	b932      	cbnz	r2, 80a05f6 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 80a05e8:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80a05ec:	6003      	str	r3, [r0, #0]
 80a05ee:	888b      	ldrh	r3, [r1, #4]
 80a05f0:	8083      	strh	r3, [r0, #4]
    }
 80a05f2:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80a05f4:	b122      	cbz	r2, 80a0600 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80a05f6:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80a05f8:	2c01      	cmp	r4, #1
 80a05fa:	d003      	beq.n	80a0604 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80a05fc:	2c04      	cmp	r4, #4
 80a05fe:	d006      	beq.n	80a060e <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a0600:	2204      	movs	r2, #4
 80a0602:	e005      	b.n	80a0610 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80a0604:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80a0606:	718c      	strb	r4, [r1, #6]
 80a0608:	810b      	strh	r3, [r1, #8]
 80a060a:	814a      	strh	r2, [r1, #10]
                    break;
 80a060c:	e7ec      	b.n	80a05e8 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80a060e:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80a0610:	810b      	strh	r3, [r1, #8]
 80a0612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0616:	718a      	strb	r2, [r1, #6]
 80a0618:	814b      	strh	r3, [r1, #10]
                    break;
 80a061a:	e7e5      	b.n	80a05e8 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080a061c <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a061c:	b510      	push	{r4, lr}
 80a061e:	2400      	movs	r4, #0
 80a0620:	7004      	strb	r4, [r0, #0]
 80a0622:	8044      	strh	r4, [r0, #2]
 80a0624:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a0628:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a062a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a062c:	dd08      	ble.n	80a0640 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 80a062e:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 80a0630:	428b      	cmp	r3, r1
 80a0632:	d904      	bls.n	80a063e <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 80a0634:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a0638:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a063a:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 80a063c:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 80a063e:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 80a0640:	d101      	bne.n	80a0646 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a0642:	2302      	movs	r3, #2
 80a0644:	e7fa      	b.n	80a063c <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 80a0646:	8041      	strh	r1, [r0, #2]
 80a0648:	e7f9      	b.n	80a063e <_ZN11SleepResultC1EiPKtj+0x22>
	...

080a064c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a064e:	460d      	mov	r5, r1
 80a0650:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a0652:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a0654:	b08b      	sub	sp, #44	; 0x2c
 80a0656:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a0658:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a065a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a0660:	4631      	mov	r1, r6
 80a0662:	9300      	str	r3, [sp, #0]
 80a0664:	4628      	mov	r0, r5
 80a0666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a0668:	9702      	str	r7, [sp, #8]
 80a066a:	f7ff fee9 	bl	80a0440 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a066e:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a0670:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 80a0672:	462a      	mov	r2, r5
 80a0674:	a805      	add	r0, sp, #20
 80a0676:	f7ff ffd1 	bl	80a061c <_ZN11SleepResultC1EiPKtj>
 80a067a:	4d0f      	ldr	r5, [pc, #60]	; (80a06b8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 80a067c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80a0680:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80a0684:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 80a0688:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80a068c:	4628      	mov	r0, r5
 80a068e:	a907      	add	r1, sp, #28
 80a0690:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80a0694:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80a0698:	9707      	str	r7, [sp, #28]
 80a069a:	f8ad 7020 	strh.w	r7, [sp, #32]
 80a069e:	f7ff ff87 	bl	80a05b0 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 80a06a2:	a807      	add	r0, sp, #28
 80a06a4:	f7ff ff75 	bl	80a0592 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 80a06a8:	4620      	mov	r0, r4
 80a06aa:	4629      	mov	r1, r5
 80a06ac:	f7ff ff96 	bl	80a05dc <_ZN17SystemSleepResult13toSleepResultEv>
}
 80a06b0:	4620      	mov	r0, r4
 80a06b2:	b00b      	add	sp, #44	; 0x2c
 80a06b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a06b6:	bf00      	nop
 80a06b8:	2000008c 	.word	0x2000008c

080a06bc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a06bc:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a06be:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a06c0:	b510      	push	{r4, lr}
 80a06c2:	4b08      	ldr	r3, [pc, #32]	; (80a06e4 <_GLOBAL__sub_I_System+0x28>)
 80a06c4:	4c08      	ldr	r4, [pc, #32]	; (80a06e8 <_GLOBAL__sub_I_System+0x2c>)
 80a06c6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a06c8:	4b08      	ldr	r3, [pc, #32]	; (80a06ec <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a06ca:	6020      	str	r0, [r4, #0]
 80a06cc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a06ce:	71a0      	strb	r0, [r4, #6]
 80a06d0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a06d2:	f7ff fe81 	bl	80a03d8 <set_system_mode>
SystemClass System;
 80a06d6:	4620      	mov	r0, r4
 80a06d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a06dc:	4a04      	ldr	r2, [pc, #16]	; (80a06f0 <_GLOBAL__sub_I_System+0x34>)
 80a06de:	4905      	ldr	r1, [pc, #20]	; (80a06f4 <_GLOBAL__sub_I_System+0x38>)
 80a06e0:	f000 bf4e 	b.w	80a1580 <__aeabi_atexit>
 80a06e4:	20000098 	.word	0x20000098
 80a06e8:	2000008c 	.word	0x2000008c
 80a06ec:	ffff0000 	.word	0xffff0000
 80a06f0:	20000068 	.word	0x20000068
 80a06f4:	080a05a5 	.word	0x080a05a5

080a06f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a06f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06fa:	4606      	mov	r6, r0
 80a06fc:	460d      	mov	r5, r1
  size_t n = 0;
 80a06fe:	2400      	movs	r4, #0
 80a0700:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0702:	42bd      	cmp	r5, r7
 80a0704:	d00c      	beq.n	80a0720 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0706:	6833      	ldr	r3, [r6, #0]
 80a0708:	4630      	mov	r0, r6
 80a070a:	689b      	ldr	r3, [r3, #8]
 80a070c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0710:	4798      	blx	r3
     if (chunk>=0)
 80a0712:	1e03      	subs	r3, r0, #0
 80a0714:	db01      	blt.n	80a071a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0716:	441c      	add	r4, r3
  while (size--) {
 80a0718:	e7f3      	b.n	80a0702 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a071a:	2c00      	cmp	r4, #0
 80a071c:	bf08      	it	eq
 80a071e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0720:	4620      	mov	r0, r4
 80a0722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0724 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0724:	b570      	push	{r4, r5, r6, lr}
 80a0726:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0728:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a072a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a072c:	b149      	cbz	r1, 80a0742 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a072e:	f000 ff96 	bl	80a165e <strlen>
 80a0732:	682b      	ldr	r3, [r5, #0]
 80a0734:	4602      	mov	r2, r0
 80a0736:	4621      	mov	r1, r4
 80a0738:	4628      	mov	r0, r5
    }
 80a073a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a073e:	68db      	ldr	r3, [r3, #12]
 80a0740:	4718      	bx	r3
    }
 80a0742:	bd70      	pop	{r4, r5, r6, pc}

080a0744 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0744:	6803      	ldr	r3, [r0, #0]
 80a0746:	689b      	ldr	r3, [r3, #8]
 80a0748:	4718      	bx	r3

080a074a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a074a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a074c:	2a01      	cmp	r2, #1
 80a074e:	bf98      	it	ls
 80a0750:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0752:	b530      	push	{r4, r5, lr}
 80a0754:	b08b      	sub	sp, #44	; 0x2c
 80a0756:	460c      	mov	r4, r1
  *str = '\0';
 80a0758:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a075c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a075e:	4625      	mov	r5, r4
 80a0760:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0764:	fb04 5312 	mls	r3, r4, r2, r5
 80a0768:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a076a:	2b09      	cmp	r3, #9
 80a076c:	bf94      	ite	ls
 80a076e:	3330      	addls	r3, #48	; 0x30
 80a0770:	3337      	addhi	r3, #55	; 0x37
 80a0772:	b2db      	uxtb	r3, r3
  } while(n);
 80a0774:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0776:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a077a:	d9f0      	bls.n	80a075e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a077c:	f7ff ffd2 	bl	80a0724 <_ZN5Print5writeEPKc>
}
 80a0780:	b00b      	add	sp, #44	; 0x2c
 80a0782:	bd30      	pop	{r4, r5, pc}

080a0784 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0784:	2300      	movs	r3, #0
 80a0786:	6840      	ldr	r0, [r0, #4]
 80a0788:	461a      	mov	r2, r3
 80a078a:	4619      	mov	r1, r3
 80a078c:	f7ff be82 	b.w	80a0494 <network_on>

080a0790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a0790:	680b      	ldr	r3, [r1, #0]
 80a0792:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a0794:	b113      	cbz	r3, 80a079c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0796:	685a      	ldr	r2, [r3, #4]
 80a0798:	3201      	adds	r2, #1
 80a079a:	605a      	str	r2, [r3, #4]
      }
 80a079c:	4770      	bx	lr
	...

080a07a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a07a0:	4b01      	ldr	r3, [pc, #4]	; (80a07a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a07a2:	4a02      	ldr	r2, [pc, #8]	; (80a07ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a07a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a07a6:	4770      	bx	lr
 80a07a8:	2000009c 	.word	0x2000009c
 80a07ac:	080a1697 	.word	0x080a1697

080a07b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a07b0:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a07b2:	681a      	ldr	r2, [r3, #0]
 80a07b4:	4b02      	ldr	r3, [pc, #8]	; (80a07c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a07b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a07b8:	4770      	bx	lr
 80a07ba:	bf00      	nop
 80a07bc:	20000000 	.word	0x20000000
 80a07c0:	200000a0 	.word	0x200000a0

080a07c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a07c4:	2100      	movs	r1, #0
 80a07c6:	f7ff be0f 	b.w	80a03e8 <system_delay_ms>

080a07ca <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a07ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a07cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a07ce:	4604      	mov	r4, r0
      if (_M_manager)
 80a07d0:	b113      	cbz	r3, 80a07d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a07d2:	2203      	movs	r2, #3
 80a07d4:	4601      	mov	r1, r0
 80a07d6:	4798      	blx	r3
    }
 80a07d8:	4620      	mov	r0, r4
 80a07da:	bd10      	pop	{r4, pc}

080a07dc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a07dc:	b510      	push	{r4, lr}
 80a07de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a07e0:	f7ff fff3 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
 80a07e4:	4620      	mov	r0, r4
 80a07e6:	bd10      	pop	{r4, pc}

080a07e8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a07e8:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a07ea:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a07ec:	460b      	mov	r3, r1
 80a07ee:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a07f0:	c803      	ldmia	r0, {r0, r1}
 80a07f2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a07f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a07fa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a07fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0802:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0806:	b002      	add	sp, #8
 80a0808:	bd10      	pop	{r4, pc}
	...

080a080c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a080c:	2300      	movs	r3, #0
 80a080e:	4803      	ldr	r0, [pc, #12]	; (80a081c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0810:	4a03      	ldr	r2, [pc, #12]	; (80a0820 <_GLOBAL__sub_I_RGB+0x14>)
 80a0812:	4904      	ldr	r1, [pc, #16]	; (80a0824 <_GLOBAL__sub_I_RGB+0x18>)
 80a0814:	6083      	str	r3, [r0, #8]
 80a0816:	f000 beb3 	b.w	80a1580 <__aeabi_atexit>
 80a081a:	bf00      	nop
 80a081c:	200000a4 	.word	0x200000a4
 80a0820:	20000068 	.word	0x20000068
 80a0824:	080a07dd 	.word	0x080a07dd

080a0828 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0828:	4b01      	ldr	r3, [pc, #4]	; (80a0830 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a082a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a082c:	4770      	bx	lr
 80a082e:	bf00      	nop
 80a0830:	20000004 	.word	0x20000004

080a0834 <serialEventRun>:
{
 80a0834:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0836:	4b13      	ldr	r3, [pc, #76]	; (80a0884 <serialEventRun+0x50>)
 80a0838:	b143      	cbz	r3, 80a084c <serialEventRun+0x18>
 80a083a:	f000 fbf3 	bl	80a1024 <_Z16_fetch_usbserialv>
 80a083e:	6803      	ldr	r3, [r0, #0]
 80a0840:	691b      	ldr	r3, [r3, #16]
 80a0842:	4798      	blx	r3
 80a0844:	2800      	cmp	r0, #0
 80a0846:	dd01      	ble.n	80a084c <serialEventRun+0x18>
        serialEvent();
 80a0848:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a084c:	4b0e      	ldr	r3, [pc, #56]	; (80a0888 <serialEventRun+0x54>)
 80a084e:	b143      	cbz	r3, 80a0862 <serialEventRun+0x2e>
 80a0850:	f000 fc92 	bl	80a1178 <_Z22__fetch_global_Serial1v>
 80a0854:	6803      	ldr	r3, [r0, #0]
 80a0856:	691b      	ldr	r3, [r3, #16]
 80a0858:	4798      	blx	r3
 80a085a:	2800      	cmp	r0, #0
 80a085c:	dd01      	ble.n	80a0862 <serialEventRun+0x2e>
        serialEvent1();
 80a085e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0862:	4b0a      	ldr	r3, [pc, #40]	; (80a088c <serialEventRun+0x58>)
 80a0864:	b10b      	cbz	r3, 80a086a <serialEventRun+0x36>
 80a0866:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a086a:	4b09      	ldr	r3, [pc, #36]	; (80a0890 <serialEventRun+0x5c>)
 80a086c:	b143      	cbz	r3, 80a0880 <serialEventRun+0x4c>
 80a086e:	f000 fc09 	bl	80a1084 <_Z17_fetch_usbserial1v>
 80a0872:	6803      	ldr	r3, [r0, #0]
 80a0874:	691b      	ldr	r3, [r3, #16]
 80a0876:	4798      	blx	r3
 80a0878:	2800      	cmp	r0, #0
 80a087a:	dd01      	ble.n	80a0880 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a087c:	f3af 8000 	nop.w
}
 80a0880:	bd08      	pop	{r3, pc}
 80a0882:	bf00      	nop
	...

080a0894 <_post_loop>:
{
 80a0894:	b508      	push	{r3, lr}
	serialEventRun();
 80a0896:	f7ff ffcd 	bl	80a0834 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a089a:	f7ff fcbb 	bl	80a0214 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a089e:	4b01      	ldr	r3, [pc, #4]	; (80a08a4 <_post_loop+0x10>)
 80a08a0:	6018      	str	r0, [r3, #0]
}
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	2000011c 	.word	0x2000011c

080a08a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a08a8:	4802      	ldr	r0, [pc, #8]	; (80a08b4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a08aa:	4a03      	ldr	r2, [pc, #12]	; (80a08b8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a08ac:	4903      	ldr	r1, [pc, #12]	; (80a08bc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a08ae:	1a12      	subs	r2, r2, r0
 80a08b0:	f000 be80 	b.w	80a15b4 <memcpy>
 80a08b4:	40024000 	.word	0x40024000
 80a08b8:	40024004 	.word	0x40024004
 80a08bc:	080a1860 	.word	0x080a1860

080a08c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a08c0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a08c2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a08c4:	461a      	mov	r2, r3
 80a08c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a08ca:	9300      	str	r3, [sp, #0]
 80a08cc:	f7ff fdae 	bl	80a042c <system_ctrl_set_result>
}
 80a08d0:	b003      	add	sp, #12
 80a08d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a08d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a08d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a08da:	8843      	ldrh	r3, [r0, #2]
 80a08dc:	2b0a      	cmp	r3, #10
 80a08de:	d008      	beq.n	80a08f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a08e0:	2b50      	cmp	r3, #80	; 0x50
 80a08e2:	d10b      	bne.n	80a08fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a08e4:	4b09      	ldr	r3, [pc, #36]	; (80a090c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a08e6:	681b      	ldr	r3, [r3, #0]
 80a08e8:	b14b      	cbz	r3, 80a08fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a08ea:	b003      	add	sp, #12
 80a08ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a08f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a08f2:	f7ff ffe5 	bl	80a08c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a08f6:	b003      	add	sp, #12
 80a08f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a08fc:	2300      	movs	r3, #0
 80a08fe:	461a      	mov	r2, r3
 80a0900:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0904:	9300      	str	r3, [sp, #0]
 80a0906:	f7ff fd91 	bl	80a042c <system_ctrl_set_result>
}
 80a090a:	e7f4      	b.n	80a08f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a090c:	200000b8 	.word	0x200000b8

080a0910 <module_user_init_hook>:
{
 80a0910:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0912:	4c12      	ldr	r4, [pc, #72]	; (80a095c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0914:	2100      	movs	r1, #0
 80a0916:	4812      	ldr	r0, [pc, #72]	; (80a0960 <module_user_init_hook+0x50>)
 80a0918:	f7ff fe24 	bl	80a0564 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a091c:	4d11      	ldr	r5, [pc, #68]	; (80a0964 <module_user_init_hook+0x54>)
 80a091e:	6823      	ldr	r3, [r4, #0]
 80a0920:	42ab      	cmp	r3, r5
 80a0922:	bf0c      	ite	eq
 80a0924:	2201      	moveq	r2, #1
 80a0926:	2200      	movne	r2, #0
 80a0928:	4b0f      	ldr	r3, [pc, #60]	; (80a0968 <module_user_init_hook+0x58>)
 80a092a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a092c:	d002      	beq.n	80a0934 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a092e:	f7ff ffbb 	bl	80a08a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0932:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0934:	f7ff fc66 	bl	80a0204 <HAL_RNG_GetRandomNumber>
 80a0938:	4604      	mov	r4, r0
    srand(seed);
 80a093a:	f000 fe51 	bl	80a15e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a093e:	4b0b      	ldr	r3, [pc, #44]	; (80a096c <module_user_init_hook+0x5c>)
 80a0940:	b113      	cbz	r3, 80a0948 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a0942:	4620      	mov	r0, r4
 80a0944:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0948:	2100      	movs	r1, #0
 80a094a:	4808      	ldr	r0, [pc, #32]	; (80a096c <module_user_init_hook+0x5c>)
 80a094c:	f7ff fde2 	bl	80a0514 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0954:	2100      	movs	r1, #0
 80a0956:	4806      	ldr	r0, [pc, #24]	; (80a0970 <module_user_init_hook+0x60>)
 80a0958:	f7ff bd5e 	b.w	80a0418 <system_ctrl_set_app_request_handler>
 80a095c:	40024000 	.word	0x40024000
 80a0960:	080a0829 	.word	0x080a0829
 80a0964:	9a271c1e 	.word	0x9a271c1e
 80a0968:	200000b4 	.word	0x200000b4
 80a096c:	00000000 	.word	0x00000000
 80a0970:	080a08d9 	.word	0x080a08d9

080a0974 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0974:	4770      	bx	lr

080a0976 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0976:	2000      	movs	r0, #0
 80a0978:	4770      	bx	lr

080a097a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a097a:	b510      	push	{r4, lr}
 80a097c:	4604      	mov	r4, r0
 80a097e:	2110      	movs	r1, #16
 80a0980:	f000 fe03 	bl	80a158a <_ZdlPvj>
 80a0984:	4620      	mov	r0, r4
 80a0986:	bd10      	pop	{r4, pc}

080a0988 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0988:	b508      	push	{r3, lr}
      { delete this; }
 80a098a:	f7ff fff6 	bl	80a097a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a098e:	bd08      	pop	{r3, pc}

080a0990 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0990:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0992:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0994:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0998:	6002      	str	r2, [r0, #0]
 80a099a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a099c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a099e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a09a0:	680c      	ldr	r4, [r1, #0]
 80a09a2:	8085      	strh	r5, [r0, #4]
 80a09a4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a09a6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a09a8:	bd30      	pop	{r4, r5, pc}

080a09aa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a09aa:	b510      	push	{r4, lr}
 80a09ac:	4604      	mov	r4, r0
    free((void*)msg_);
 80a09ae:	6800      	ldr	r0, [r0, #0]
 80a09b0:	f7ff fdc0 	bl	80a0534 <free>
}
 80a09b4:	4620      	mov	r0, r4
 80a09b6:	bd10      	pop	{r4, pc}

080a09b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a09b8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a09ba:	68c4      	ldr	r4, [r0, #12]
 80a09bc:	b1f4      	cbz	r4, 80a09fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a09be:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a09c0:	2b02      	cmp	r3, #2
 80a09c2:	d103      	bne.n	80a09cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a09c4:	f104 000c 	add.w	r0, r4, #12
 80a09c8:	f7ff ffef 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a09cc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a09ce:	b135      	cbz	r5, 80a09de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a09d0:	4628      	mov	r0, r5
 80a09d2:	f7ff fefa 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
 80a09d6:	2110      	movs	r1, #16
 80a09d8:	4628      	mov	r0, r5
 80a09da:	f000 fdd6 	bl	80a158a <_ZdlPvj>
 80a09de:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a09e0:	b135      	cbz	r5, 80a09f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a09e2:	4628      	mov	r0, r5
 80a09e4:	f7ff fef1 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
 80a09e8:	2110      	movs	r1, #16
 80a09ea:	4628      	mov	r0, r5
 80a09ec:	f000 fdcd 	bl	80a158a <_ZdlPvj>
 80a09f0:	4620      	mov	r0, r4
 80a09f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a09f6:	2114      	movs	r1, #20
 80a09f8:	f000 bdc7 	b.w	80a158a <_ZdlPvj>
 80a09fc:	bd38      	pop	{r3, r4, r5, pc}

080a09fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a09fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0a00:	460e      	mov	r6, r1
 80a0a02:	4604      	mov	r4, r0
 80a0a04:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0a08:	460d      	mov	r5, r1
 80a0a0a:	a801      	add	r0, sp, #4
 80a0a0c:	4631      	mov	r1, r6
 80a0a0e:	9300      	str	r3, [sp, #0]
 80a0a10:	f7ff febe 	bl	80a0790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0a14:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0a16:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0a18:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0a1a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0a1c:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0a1e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0a20:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0a22:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0a24:	f7ff fb49 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a28:	4630      	mov	r0, r6
 80a0a2a:	f7ff fb46 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0a2e:	4628      	mov	r0, r5
 80a0a30:	2108      	movs	r1, #8
 80a0a32:	f000 fdaa 	bl	80a158a <_ZdlPvj>
        return p;
    }
 80a0a36:	4620      	mov	r0, r4
 80a0a38:	b002      	add	sp, #8
 80a0a3a:	bd70      	pop	{r4, r5, r6, pc}

080a0a3c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0a3c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0a3e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0a40:	b90a      	cbnz	r2, 80a0a46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0a42:	f000 fda6 	bl	80a1592 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0a46:	68c3      	ldr	r3, [r0, #12]
    }
 80a0a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0a4c:	4718      	bx	r3

080a0a4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0a4e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0a50:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0a52:	f100 0110 	add.w	r1, r0, #16
 80a0a56:	f7ff fff1 	bl	80a0a3c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a0a5a:	bd08      	pop	{r3, pc}

080a0a5c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a0a5c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0a5e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0a60:	b90a      	cbnz	r2, 80a0a66 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0a62:	f000 fd96 	bl	80a1592 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0a66:	68c3      	ldr	r3, [r0, #12]
    }
 80a0a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0a6c:	4718      	bx	r3

080a0a6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0a6e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0a70:	6800      	ldr	r0, [r0, #0]
 80a0a72:	f100 0110 	add.w	r1, r0, #16
 80a0a76:	f7ff fff1 	bl	80a0a5c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a0a7a:	bd08      	pop	{r3, pc}

080a0a7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0a7c:	b538      	push	{r3, r4, r5, lr}
 80a0a7e:	2300      	movs	r3, #0
 80a0a80:	4604      	mov	r4, r0
 80a0a82:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0a84:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0a86:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0a88:	f7ff fb05 	bl	80a0096 <_Znwj>
 80a0a8c:	b128      	cbz	r0, 80a0a9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0a8e:	2301      	movs	r3, #1
 80a0a90:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a0a94:	4b02      	ldr	r3, [pc, #8]	; (80a0aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0a96:	60c5      	str	r5, [r0, #12]
 80a0a98:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0a9a:	6020      	str	r0, [r4, #0]
	}
 80a0a9c:	4620      	mov	r0, r4
 80a0a9e:	bd38      	pop	{r3, r4, r5, pc}
 80a0aa0:	080a16c0 	.word	0x080a16c0

080a0aa4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a0aa4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0aa6:	2300      	movs	r3, #0
 80a0aa8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0aaa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0aac:	4604      	mov	r4, r0
 80a0aae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0ab0:	b12b      	cbz	r3, 80a0abe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0ab2:	2202      	movs	r2, #2
 80a0ab4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0ab6:	68eb      	ldr	r3, [r5, #12]
 80a0ab8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0aba:	68ab      	ldr	r3, [r5, #8]
 80a0abc:	60a3      	str	r3, [r4, #8]
    }
 80a0abe:	4620      	mov	r0, r4
 80a0ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a0ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ac6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0ac8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0aca:	4668      	mov	r0, sp
 80a0acc:	f7ff ff60 	bl	80a0990 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0ad0:	f04f 0302 	mov.w	r3, #2
 80a0ad4:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0ad8:	2a00      	cmp	r2, #0
 80a0ada:	d103      	bne.n	80a0ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0adc:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0ae0:	2900      	cmp	r1, #0
 80a0ae2:	d1f7      	bne.n	80a0ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a0ae4:	d125      	bne.n	80a0b32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a0ae6:	f104 050c 	add.w	r5, r4, #12
 80a0aea:	4669      	mov	r1, sp
 80a0aec:	4628      	mov	r0, r5
 80a0aee:	f7ff ff4f 	bl	80a0990 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0af2:	2301      	movs	r3, #1
 80a0af4:	f3bf 8f5b 	dmb	ish
 80a0af8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0afa:	2000      	movs	r0, #0
 80a0afc:	f3bf 8f5b 	dmb	ish
 80a0b00:	f104 0308 	add.w	r3, r4, #8
 80a0b04:	e853 6f00 	ldrex	r6, [r3]
 80a0b08:	e843 0200 	strex	r2, r0, [r3]
 80a0b0c:	2a00      	cmp	r2, #0
 80a0b0e:	d1f9      	bne.n	80a0b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0b10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0b14:	b16e      	cbz	r6, 80a0b32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a0b16:	f7ff fc6f 	bl	80a03f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0b1a:	b178      	cbz	r0, 80a0b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0b1c:	4629      	mov	r1, r5
 80a0b1e:	4630      	mov	r0, r6
 80a0b20:	f7ff ff8c 	bl	80a0a3c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a0b24:	4630      	mov	r0, r6
 80a0b26:	f7ff fe50 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0b2a:	2110      	movs	r1, #16
 80a0b2c:	4630      	mov	r0, r6
 80a0b2e:	f000 fd2c 	bl	80a158a <_ZdlPvj>
        p_->setError(std::move(error));
 80a0b32:	4668      	mov	r0, sp
 80a0b34:	f7ff ff39 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
    }
 80a0b38:	b009      	add	sp, #36	; 0x24
 80a0b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0b3c:	4631      	mov	r1, r6
 80a0b3e:	a802      	add	r0, sp, #8
 80a0b40:	f7ff ffb0 	bl	80a0aa4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0b44:	68e0      	ldr	r0, [r4, #12]
 80a0b46:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0b4a:	b108      	cbz	r0, 80a0b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a0b4c:	f000 fd6c 	bl	80a1628 <strdup>
        type_(type) {
 80a0b50:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0b52:	2010      	movs	r0, #16
 80a0b54:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0b58:	f7ff fa9d 	bl	80a0096 <_Znwj>
 80a0b5c:	4605      	mov	r5, r0
 80a0b5e:	b1e8      	cbz	r0, 80a0b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a0b60:	2700      	movs	r7, #0
 80a0b62:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0b64:	2018      	movs	r0, #24
 80a0b66:	f7ff fa96 	bl	80a0096 <_Znwj>
 80a0b6a:	4604      	mov	r4, r0
 80a0b6c:	b188      	cbz	r0, 80a0b92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a0b6e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0b70:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0b72:	a802      	add	r0, sp, #8
 80a0b74:	f7ff fe38 	bl	80a07e8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b78:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0b7a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b7c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b7e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0b80:	9204      	str	r2, [sp, #16]
 80a0b82:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0b84:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b86:	60e3      	str	r3, [r4, #12]
 80a0b88:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a0b8c:	9205      	str	r2, [sp, #20]
 80a0b8e:	f7ff feff 	bl	80a0990 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a0b92:	4b08      	ldr	r3, [pc, #32]	; (80a0bb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0b94:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0b96:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0b98:	4b07      	ldr	r3, [pc, #28]	; (80a0bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a0b9a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a0b9c:	a806      	add	r0, sp, #24
 80a0b9e:	f7ff ff04 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0ba2:	a802      	add	r0, sp, #8
 80a0ba4:	f7ff fe11 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0ba8:	2200      	movs	r2, #0
 80a0baa:	4629      	mov	r1, r5
 80a0bac:	4803      	ldr	r0, [pc, #12]	; (80a0bbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a0bae:	f7ff fc2b 	bl	80a0408 <application_thread_invoke>
 80a0bb2:	e7b7      	b.n	80a0b24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0bb4:	080a0a4f 	.word	0x080a0a4f
 80a0bb8:	080a0ce5 	.word	0x080a0ce5
 80a0bbc:	080a11fd 	.word	0x080a11fd

080a0bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0bc4:	b08a      	sub	sp, #40	; 0x28
 80a0bc6:	4605      	mov	r5, r0
 80a0bc8:	460c      	mov	r4, r1
 80a0bca:	4617      	mov	r7, r2
 80a0bcc:	4698      	mov	r8, r3
 80a0bce:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0bd2:	f7ff fc8f 	bl	80a04f4 <spark_cloud_flag_connected>
 80a0bd6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0bd8:	4682      	mov	sl, r0
 80a0bda:	bb38      	cbnz	r0, 80a0c2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a0bdc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0be0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0be2:	a905      	add	r1, sp, #20
 80a0be4:	4630      	mov	r0, r6
 80a0be6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0bea:	f7ff fed1 	bl	80a0990 <_ZN8particle5ErrorC1EOS0_>
 80a0bee:	2014      	movs	r0, #20
 80a0bf0:	f7ff fa51 	bl	80a0096 <_Znwj>
 80a0bf4:	4604      	mov	r4, r0
 80a0bf6:	b148      	cbz	r0, 80a0c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0bf8:	2302      	movs	r3, #2
 80a0bfa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0bfc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0bfe:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0c02:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a0c04:	4631      	mov	r1, r6
 80a0c06:	300c      	adds	r0, #12
 80a0c08:	f7ff fec2 	bl	80a0990 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0c0c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a0c0e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0c10:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a0c14:	f7ff ff32 	bl	80a0a7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0c18:	4630      	mov	r0, r6
 80a0c1a:	f7ff fec6 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0c1e:	a805      	add	r0, sp, #20
 80a0c20:	f7ff fec3 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a0c24:	4628      	mov	r0, r5
 80a0c26:	b00a      	add	sp, #40	; 0x28
 80a0c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0c2c:	230c      	movs	r3, #12
 80a0c2e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0c32:	2014      	movs	r0, #20
 80a0c34:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a0c38:	9307      	str	r3, [sp, #28]
 80a0c3a:	f7ff fa2c 	bl	80a0096 <_Znwj>
 80a0c3e:	4601      	mov	r1, r0
 80a0c40:	b128      	cbz	r0, 80a0c4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0c42:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a0c46:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0c4a:	f880 a001 	strb.w	sl, [r0, #1]
 80a0c4e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0c50:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a0c52:	f7ff ff13 	bl	80a0a7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a0c56:	4b22      	ldr	r3, [pc, #136]	; (80a0ce0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0c58:	2008      	movs	r0, #8
 80a0c5a:	9308      	str	r3, [sp, #32]
 80a0c5c:	f7ff fa1b 	bl	80a0096 <_Znwj>
 80a0c60:	4682      	mov	sl, r0
 80a0c62:	b128      	cbz	r0, 80a0c70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0c64:	9b03      	ldr	r3, [sp, #12]
 80a0c66:	a904      	add	r1, sp, #16
 80a0c68:	f840 3b04 	str.w	r3, [r0], #4
 80a0c6c:	f7ff fd90 	bl	80a0790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0c70:	4642      	mov	r2, r8
 80a0c72:	4639      	mov	r1, r7
 80a0c74:	4620      	mov	r0, r4
 80a0c76:	9600      	str	r6, [sp, #0]
 80a0c78:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a0c7c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0c80:	f7ff fc40 	bl	80a0504 <spark_send_event>
 80a0c84:	b9b8      	cbnz	r0, 80a0cb6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a0c86:	9b03      	ldr	r3, [sp, #12]
 80a0c88:	785b      	ldrb	r3, [r3, #1]
 80a0c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0c8e:	b993      	cbnz	r3, 80a0cb6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a0c90:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a0c94:	a905      	add	r1, sp, #20
 80a0c96:	a803      	add	r0, sp, #12
 80a0c98:	9205      	str	r2, [sp, #20]
 80a0c9a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0c9e:	f7ff ff11 	bl	80a0ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0ca2:	a805      	add	r0, sp, #20
 80a0ca4:	f7ff fe81 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0ca8:	a805      	add	r0, sp, #20
 80a0caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0cac:	f7ff fea7 	bl	80a09fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a0cb0:	a806      	add	r0, sp, #24
 80a0cb2:	f7ff fa02 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0cb6:	9b03      	ldr	r3, [sp, #12]
 80a0cb8:	a904      	add	r1, sp, #16
 80a0cba:	a806      	add	r0, sp, #24
 80a0cbc:	9305      	str	r3, [sp, #20]
 80a0cbe:	f7ff fd67 	bl	80a0790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0cc2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0cc4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0cc6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a0cc8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0cca:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a0ccc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a0cce:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a0cd0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a0cd2:	f7ff f9f2 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0cd6:	a804      	add	r0, sp, #16
 80a0cd8:	f7ff f9ef 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a0cdc:	e7a2      	b.n	80a0c24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a0cde:	bf00      	nop
 80a0ce0:	080a0da9 	.word	0x080a0da9

080a0ce4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a0ce4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ce8:	4605      	mov	r5, r0
	  switch (__op)
 80a0cea:	d007      	beq.n	80a0cfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a0cec:	2a03      	cmp	r2, #3
 80a0cee:	d018      	beq.n	80a0d22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a0cf0:	2a01      	cmp	r2, #1
 80a0cf2:	d101      	bne.n	80a0cf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0cf4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0cf6:	6003      	str	r3, [r0, #0]
	}
 80a0cf8:	2000      	movs	r0, #0
 80a0cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0cfc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a0cfe:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d00:	f7ff f9c9 	bl	80a0096 <_Znwj>
 80a0d04:	4604      	mov	r4, r0
 80a0d06:	b150      	cbz	r0, 80a0d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0d08:	4631      	mov	r1, r6
 80a0d0a:	f7ff fecb 	bl	80a0aa4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0d0e:	6930      	ldr	r0, [r6, #16]
 80a0d10:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0d14:	b108      	cbz	r0, 80a0d1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a0d16:	f000 fc87 	bl	80a1628 <strdup>
        type_(type) {
 80a0d1a:	6120      	str	r0, [r4, #16]
 80a0d1c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a0d1e:	602c      	str	r4, [r5, #0]
	}
 80a0d20:	e7ea      	b.n	80a0cf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0d22:	6804      	ldr	r4, [r0, #0]
 80a0d24:	2c00      	cmp	r4, #0
 80a0d26:	d0e7      	beq.n	80a0cf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a0d28:	f104 0010 	add.w	r0, r4, #16
 80a0d2c:	f7ff fe3d 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	f7ff fd4a 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0d36:	2118      	movs	r1, #24
 80a0d38:	4620      	mov	r0, r4
 80a0d3a:	f000 fc26 	bl	80a158a <_ZdlPvj>
 80a0d3e:	e7db      	b.n	80a0cf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a0d40 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a0d40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0d42:	2300      	movs	r3, #0
 80a0d44:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0d46:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0d48:	4604      	mov	r4, r0
 80a0d4a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0d4c:	b12b      	cbz	r3, 80a0d5a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0d4e:	2202      	movs	r2, #2
 80a0d50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0d52:	68eb      	ldr	r3, [r5, #12]
 80a0d54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0d56:	68ab      	ldr	r3, [r5, #8]
 80a0d58:	60a3      	str	r3, [r4, #8]
    }
 80a0d5a:	4620      	mov	r0, r4
 80a0d5c:	bd38      	pop	{r3, r4, r5, pc}

080a0d5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a0d5e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0d60:	b570      	push	{r4, r5, r6, lr}
 80a0d62:	4604      	mov	r4, r0
	  switch (__op)
 80a0d64:	d007      	beq.n	80a0d76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a0d66:	2a03      	cmp	r2, #3
 80a0d68:	d012      	beq.n	80a0d90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a0d6a:	2a01      	cmp	r2, #1
 80a0d6c:	d101      	bne.n	80a0d72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0d6e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0d70:	6003      	str	r3, [r0, #0]
	}
 80a0d72:	2000      	movs	r0, #0
 80a0d74:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d76:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a0d78:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d7a:	f7ff f98c 	bl	80a0096 <_Znwj>
 80a0d7e:	4605      	mov	r5, r0
 80a0d80:	b120      	cbz	r0, 80a0d8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a0d82:	4631      	mov	r1, r6
 80a0d84:	f7ff ffdc 	bl	80a0d40 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0d88:	7c33      	ldrb	r3, [r6, #16]
 80a0d8a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a0d8c:	6025      	str	r5, [r4, #0]
	}
 80a0d8e:	e7f0      	b.n	80a0d72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0d90:	6804      	ldr	r4, [r0, #0]
 80a0d92:	2c00      	cmp	r4, #0
 80a0d94:	d0ed      	beq.n	80a0d72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	f7ff fd17 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0d9c:	2114      	movs	r1, #20
 80a0d9e:	4620      	mov	r0, r4
 80a0da0:	f000 fbf3 	bl	80a158a <_ZdlPvj>
 80a0da4:	e7e5      	b.n	80a0d72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a0da8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0daa:	4604      	mov	r4, r0
 80a0dac:	b089      	sub	sp, #36	; 0x24
 80a0dae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0db0:	a801      	add	r0, sp, #4
 80a0db2:	4611      	mov	r1, r2
 80a0db4:	f7ff fe23 	bl	80a09fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0db8:	b1a4      	cbz	r4, 80a0de4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0dba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0dbc:	b11d      	cbz	r5, 80a0dc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a0dbe:	4628      	mov	r0, r5
 80a0dc0:	f000 fc32 	bl	80a1628 <strdup>
 80a0dc4:	4605      	mov	r5, r0
 80a0dc6:	a801      	add	r0, sp, #4
 80a0dc8:	a903      	add	r1, sp, #12
        type_(type) {
 80a0dca:	9503      	str	r5, [sp, #12]
 80a0dcc:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a0dd0:	f7ff fe78 	bl	80a0ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0dd4:	a803      	add	r0, sp, #12
 80a0dd6:	f7ff fde8 	bl	80a09aa <_ZN8particle5ErrorD1Ev>
 80a0dda:	a802      	add	r0, sp, #8
 80a0ddc:	f7ff f96d 	bl	80a00ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0de0:	b009      	add	sp, #36	; 0x24
 80a0de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0de4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0de6:	9d01      	ldr	r5, [sp, #4]
 80a0de8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a0dec:	2a00      	cmp	r2, #0
 80a0dee:	d103      	bne.n	80a0df8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a0df0:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a0df4:	2900      	cmp	r1, #0
 80a0df6:	d1f7      	bne.n	80a0de8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a0df8:	d1ef      	bne.n	80a0dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a0dfa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0dfc:	f3bf 8f5b 	dmb	ish
 80a0e00:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0e02:	f3bf 8f5b 	dmb	ish
 80a0e06:	1d2b      	adds	r3, r5, #4
 80a0e08:	e853 6f00 	ldrex	r6, [r3]
 80a0e0c:	e843 4200 	strex	r2, r4, [r3]
 80a0e10:	2a00      	cmp	r2, #0
 80a0e12:	d1f9      	bne.n	80a0e08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a0e14:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0e18:	2e00      	cmp	r6, #0
 80a0e1a:	d0de      	beq.n	80a0dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	f7ff faeb 	bl	80a03f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0e22:	4607      	mov	r7, r0
 80a0e24:	b160      	cbz	r0, 80a0e40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0e26:	4630      	mov	r0, r6
 80a0e28:	f105 010c 	add.w	r1, r5, #12
 80a0e2c:	f7ff fe16 	bl	80a0a5c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a0e30:	4630      	mov	r0, r6
 80a0e32:	f7ff fcca 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0e36:	2110      	movs	r1, #16
 80a0e38:	4630      	mov	r0, r6
 80a0e3a:	f000 fba6 	bl	80a158a <_ZdlPvj>
 80a0e3e:	e7cc      	b.n	80a0dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0e40:	4631      	mov	r1, r6
 80a0e42:	a803      	add	r0, sp, #12
 80a0e44:	f7ff ff7c 	bl	80a0d40 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0e48:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0e4a:	2010      	movs	r0, #16
 80a0e4c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a0e50:	f7ff f921 	bl	80a0096 <_Znwj>
 80a0e54:	4605      	mov	r5, r0
 80a0e56:	b1d0      	cbz	r0, 80a0e8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a0e58:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0e5a:	2014      	movs	r0, #20
 80a0e5c:	f7ff f91b 	bl	80a0096 <_Znwj>
 80a0e60:	4604      	mov	r4, r0
 80a0e62:	b178      	cbz	r0, 80a0e84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a0e64:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0e66:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0e68:	a803      	add	r0, sp, #12
 80a0e6a:	f7ff fcbd 	bl	80a07e8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e6e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0e70:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e72:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e74:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a0e76:	9205      	str	r2, [sp, #20]
 80a0e78:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e7a:	60e3      	str	r3, [r4, #12]
 80a0e7c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a0e80:	9206      	str	r2, [sp, #24]
 80a0e82:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0e84:	4b06      	ldr	r3, [pc, #24]	; (80a0ea0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0e86:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0e88:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0e8a:	4b06      	ldr	r3, [pc, #24]	; (80a0ea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a0e8c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a0e8e:	a803      	add	r0, sp, #12
 80a0e90:	f7ff fc9b 	bl	80a07ca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0e94:	2200      	movs	r2, #0
 80a0e96:	4629      	mov	r1, r5
 80a0e98:	4803      	ldr	r0, [pc, #12]	; (80a0ea8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a0e9a:	f7ff fab5 	bl	80a0408 <application_thread_invoke>
 80a0e9e:	e7c7      	b.n	80a0e30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a0ea0:	080a0a6f 	.word	0x080a0a6f
 80a0ea4:	080a0d5f 	.word	0x080a0d5f
 80a0ea8:	080a11fd 	.word	0x080a11fd

080a0eac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0eac:	4770      	bx	lr

080a0eae <_ZN9IPAddressD0Ev>:
 80a0eae:	b510      	push	{r4, lr}
 80a0eb0:	4604      	mov	r4, r0
 80a0eb2:	2118      	movs	r1, #24
 80a0eb4:	f000 fb69 	bl	80a158a <_ZdlPvj>
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	bd10      	pop	{r4, pc}

080a0ebc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ebe:	460e      	mov	r6, r1
 80a0ec0:	2400      	movs	r4, #0
 80a0ec2:	f100 0708 	add.w	r7, r0, #8
 80a0ec6:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0ec8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0ecc:	220a      	movs	r2, #10
 80a0ece:	4630      	mov	r0, r6
 80a0ed0:	f7ff fc3b 	bl	80a074a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ed4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0ed6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0ed8:	d101      	bne.n	80a0ede <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0ede:	2c00      	cmp	r4, #0
 80a0ee0:	d0f2      	beq.n	80a0ec8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0ee2:	212e      	movs	r1, #46	; 0x2e
 80a0ee4:	4630      	mov	r0, r6
 80a0ee6:	f7ff fc2d 	bl	80a0744 <_ZN5Print5printEc>
 80a0eea:	4404      	add	r4, r0
 80a0eec:	e7ec      	b.n	80a0ec8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0ef0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0ef0:	b510      	push	{r4, lr}
 80a0ef2:	4604      	mov	r4, r0
 80a0ef4:	4b04      	ldr	r3, [pc, #16]	; (80a0f08 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0ef6:	2211      	movs	r2, #17
 80a0ef8:	2100      	movs	r1, #0
 80a0efa:	f840 3b04 	str.w	r3, [r0], #4
 80a0efe:	f000 fb67 	bl	80a15d0 <memset>
}
 80a0f02:	4620      	mov	r0, r4
 80a0f04:	bd10      	pop	{r4, pc}
 80a0f06:	bf00      	nop
 80a0f08:	080a16dc 	.word	0x080a16dc

080a0f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0f0c:	4603      	mov	r3, r0
 80a0f0e:	4a07      	ldr	r2, [pc, #28]	; (80a0f2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0f10:	b510      	push	{r4, lr}
 80a0f12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0f16:	f101 0210 	add.w	r2, r1, #16
 80a0f1a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0f1e:	4291      	cmp	r1, r2
 80a0f20:	f843 4b04 	str.w	r4, [r3], #4
 80a0f24:	d1f9      	bne.n	80a0f1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0f26:	780a      	ldrb	r2, [r1, #0]
 80a0f28:	701a      	strb	r2, [r3, #0]
}
 80a0f2a:	bd10      	pop	{r4, pc}
 80a0f2c:	080a16dc 	.word	0x080a16dc

080a0f30 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0f30:	4a02      	ldr	r2, [pc, #8]	; (80a0f3c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0f32:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0f36:	2204      	movs	r2, #4
 80a0f38:	7502      	strb	r2, [r0, #20]
}
 80a0f3a:	4770      	bx	lr
 80a0f3c:	080a16dc 	.word	0x080a16dc

080a0f40 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0f40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0f42:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0f46:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0f4a:	2304      	movs	r3, #4
 80a0f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0f50:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0f54:	6044      	str	r4, [r0, #4]
 80a0f56:	7503      	strb	r3, [r0, #20]
}
 80a0f58:	bd10      	pop	{r4, pc}
	...

080a0f5c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f5e:	4d04      	ldr	r5, [pc, #16]	; (80a0f70 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0f60:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0f62:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0f66:	9500      	str	r5, [sp, #0]
 80a0f68:	f7ff ffea 	bl	80a0f40 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0f6c:	b003      	add	sp, #12
 80a0f6e:	bd30      	pop	{r4, r5, pc}
 80a0f70:	080a16dc 	.word	0x080a16dc

080a0f74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f74:	7441      	strb	r1, [r0, #17]
}
 80a0f76:	4770      	bx	lr

080a0f78 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0f78:	4770      	bx	lr

080a0f7a <_ZN9USBSerial4readEv>:
{
 80a0f7a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0f7c:	2100      	movs	r1, #0
 80a0f7e:	7c00      	ldrb	r0, [r0, #16]
 80a0f80:	f7ff fa0a 	bl	80a0398 <HAL_USB_USART_Receive_Data>
}
 80a0f84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f88:	bd08      	pop	{r3, pc}

080a0f8a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a0f8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0f8c:	2101      	movs	r1, #1
 80a0f8e:	7c00      	ldrb	r0, [r0, #16]
 80a0f90:	f7ff fa02 	bl	80a0398 <HAL_USB_USART_Receive_Data>
}
 80a0f94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f98:	bd08      	pop	{r3, pc}

080a0f9a <_ZN9USBSerial17availableForWriteEv>:
{
 80a0f9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0f9c:	7c00      	ldrb	r0, [r0, #16]
 80a0f9e:	f7ff f9f3 	bl	80a0388 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0fa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0fa6:	bd08      	pop	{r3, pc}

080a0fa8 <_ZN9USBSerial9availableEv>:
{
 80a0fa8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0faa:	7c00      	ldrb	r0, [r0, #16]
 80a0fac:	f7ff f9e4 	bl	80a0378 <HAL_USB_USART_Available_Data>
}
 80a0fb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0fb4:	bd08      	pop	{r3, pc}

080a0fb6 <_ZN9USBSerial5writeEh>:
{
 80a0fb6:	b538      	push	{r3, r4, r5, lr}
 80a0fb8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0fba:	7c00      	ldrb	r0, [r0, #16]
{
 80a0fbc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0fbe:	f7ff f9e3 	bl	80a0388 <HAL_USB_USART_Available_Data_For_Write>
 80a0fc2:	2800      	cmp	r0, #0
 80a0fc4:	dc01      	bgt.n	80a0fca <_ZN9USBSerial5writeEh+0x14>
 80a0fc6:	7c60      	ldrb	r0, [r4, #17]
 80a0fc8:	b128      	cbz	r0, 80a0fd6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0fca:	4629      	mov	r1, r5
 80a0fcc:	7c20      	ldrb	r0, [r4, #16]
 80a0fce:	f7ff f9eb 	bl	80a03a8 <HAL_USB_USART_Send_Data>
 80a0fd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0fd6:	bd38      	pop	{r3, r4, r5, pc}

080a0fd8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0fd8:	7c00      	ldrb	r0, [r0, #16]
 80a0fda:	f7ff b9ed 	b.w	80a03b8 <HAL_USB_USART_Flush_Data>

080a0fde <_ZN9USBSerialD0Ev>:
 80a0fde:	b510      	push	{r4, lr}
 80a0fe0:	4604      	mov	r4, r0
 80a0fe2:	2114      	movs	r1, #20
 80a0fe4:	f000 fad1 	bl	80a158a <_ZdlPvj>
 80a0fe8:	4620      	mov	r0, r4
 80a0fea:	bd10      	pop	{r4, pc}

080a0fec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0fec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ff2:	4604      	mov	r4, r0
 80a0ff4:	4608      	mov	r0, r1
 80a0ff6:	2100      	movs	r1, #0
 80a0ff8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0ffc:	4b04      	ldr	r3, [pc, #16]	; (80a1010 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0ffe:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1000:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1002:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1004:	4611      	mov	r1, r2
  _blocking = true;
 80a1006:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1008:	f7ff f9ae 	bl	80a0368 <HAL_USB_USART_Init>
}
 80a100c:	4620      	mov	r0, r4
 80a100e:	bd10      	pop	{r4, pc}
 80a1010:	080a16f0 	.word	0x080a16f0

080a1014 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1014:	b510      	push	{r4, lr}
 80a1016:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1018:	2214      	movs	r2, #20
 80a101a:	2100      	movs	r1, #0
 80a101c:	f000 fad8 	bl	80a15d0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1020:	4620      	mov	r0, r4
 80a1022:	bd10      	pop	{r4, pc}

080a1024 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1024:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1026:	4d0f      	ldr	r5, [pc, #60]	; (80a1064 <_Z16_fetch_usbserialv+0x40>)
{
 80a1028:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a102a:	a801      	add	r0, sp, #4
 80a102c:	f7ff fff2 	bl	80a1014 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1030:	7829      	ldrb	r1, [r5, #0]
 80a1032:	f3bf 8f5b 	dmb	ish
 80a1036:	f011 0401 	ands.w	r4, r1, #1
 80a103a:	d110      	bne.n	80a105e <_Z16_fetch_usbserialv+0x3a>
 80a103c:	4628      	mov	r0, r5
 80a103e:	f7ff f830 	bl	80a00a2 <__cxa_guard_acquire>
 80a1042:	b160      	cbz	r0, 80a105e <_Z16_fetch_usbserialv+0x3a>
 80a1044:	4621      	mov	r1, r4
 80a1046:	aa01      	add	r2, sp, #4
 80a1048:	4807      	ldr	r0, [pc, #28]	; (80a1068 <_Z16_fetch_usbserialv+0x44>)
 80a104a:	f7ff ffcf 	bl	80a0fec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a104e:	4628      	mov	r0, r5
 80a1050:	f7ff f82c 	bl	80a00ac <__cxa_guard_release>
 80a1054:	4a05      	ldr	r2, [pc, #20]	; (80a106c <_Z16_fetch_usbserialv+0x48>)
 80a1056:	4906      	ldr	r1, [pc, #24]	; (80a1070 <_Z16_fetch_usbserialv+0x4c>)
 80a1058:	4803      	ldr	r0, [pc, #12]	; (80a1068 <_Z16_fetch_usbserialv+0x44>)
 80a105a:	f000 fa91 	bl	80a1580 <__aeabi_atexit>
	return _usbserial;
}
 80a105e:	4802      	ldr	r0, [pc, #8]	; (80a1068 <_Z16_fetch_usbserialv+0x44>)
 80a1060:	b007      	add	sp, #28
 80a1062:	bd30      	pop	{r4, r5, pc}
 80a1064:	200000bc 	.word	0x200000bc
 80a1068:	200000c4 	.word	0x200000c4
 80a106c:	20000068 	.word	0x20000068
 80a1070:	080a0f79 	.word	0x080a0f79

080a1074 <_Z23acquireUSBSerial1Bufferv>:
 80a1074:	b510      	push	{r4, lr}
 80a1076:	4604      	mov	r4, r0
 80a1078:	2214      	movs	r2, #20
 80a107a:	2100      	movs	r1, #0
 80a107c:	f000 faa8 	bl	80a15d0 <memset>
 80a1080:	4620      	mov	r0, r4
 80a1082:	bd10      	pop	{r4, pc}

080a1084 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1084:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1086:	4c0f      	ldr	r4, [pc, #60]	; (80a10c4 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1088:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a108a:	a801      	add	r0, sp, #4
 80a108c:	f7ff fff2 	bl	80a1074 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1090:	7823      	ldrb	r3, [r4, #0]
 80a1092:	f3bf 8f5b 	dmb	ish
 80a1096:	07db      	lsls	r3, r3, #31
 80a1098:	d410      	bmi.n	80a10bc <_Z17_fetch_usbserial1v+0x38>
 80a109a:	4620      	mov	r0, r4
 80a109c:	f7ff f801 	bl	80a00a2 <__cxa_guard_acquire>
 80a10a0:	b160      	cbz	r0, 80a10bc <_Z17_fetch_usbserial1v+0x38>
 80a10a2:	2101      	movs	r1, #1
 80a10a4:	aa01      	add	r2, sp, #4
 80a10a6:	4808      	ldr	r0, [pc, #32]	; (80a10c8 <_Z17_fetch_usbserial1v+0x44>)
 80a10a8:	f7ff ffa0 	bl	80a0fec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	f7fe fffd 	bl	80a00ac <__cxa_guard_release>
 80a10b2:	4a06      	ldr	r2, [pc, #24]	; (80a10cc <_Z17_fetch_usbserial1v+0x48>)
 80a10b4:	4906      	ldr	r1, [pc, #24]	; (80a10d0 <_Z17_fetch_usbserial1v+0x4c>)
 80a10b6:	4804      	ldr	r0, [pc, #16]	; (80a10c8 <_Z17_fetch_usbserial1v+0x44>)
 80a10b8:	f000 fa62 	bl	80a1580 <__aeabi_atexit>
  return _usbserial1;
}
 80a10bc:	4802      	ldr	r0, [pc, #8]	; (80a10c8 <_Z17_fetch_usbserial1v+0x44>)
 80a10be:	b006      	add	sp, #24
 80a10c0:	bd10      	pop	{r4, pc}
 80a10c2:	bf00      	nop
 80a10c4:	200000c0 	.word	0x200000c0
 80a10c8:	200000d8 	.word	0x200000d8
 80a10cc:	20000068 	.word	0x20000068
 80a10d0:	080a0f79 	.word	0x080a0f79

080a10d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a10d4:	4770      	bx	lr

080a10d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10d6:	7441      	strb	r1, [r0, #17]
}
 80a10d8:	4770      	bx	lr

080a10da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a10da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a10dc:	7c00      	ldrb	r0, [r0, #16]
 80a10de:	f7ff f8f1 	bl	80a02c4 <hal_usart_available_data_for_write>
}
 80a10e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10e6:	bd08      	pop	{r3, pc}

080a10e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a10e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a10ea:	7c00      	ldrb	r0, [r0, #16]
 80a10ec:	f7ff f8c2 	bl	80a0274 <hal_usart_available>
}
 80a10f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10f4:	bd08      	pop	{r3, pc}

080a10f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a10f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a10f8:	7c00      	ldrb	r0, [r0, #16]
 80a10fa:	f7ff f8cb 	bl	80a0294 <hal_usart_peek>
}
 80a10fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1102:	bd08      	pop	{r3, pc}

080a1104 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1104:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1106:	7c00      	ldrb	r0, [r0, #16]
 80a1108:	f7ff f8bc 	bl	80a0284 <hal_usart_read>
}
 80a110c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1110:	bd08      	pop	{r3, pc}

080a1112 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1112:	7c00      	ldrb	r0, [r0, #16]
 80a1114:	f7ff b8c6 	b.w	80a02a4 <hal_usart_flush>

080a1118 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1118:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a111a:	7c46      	ldrb	r6, [r0, #17]
{
 80a111c:	4604      	mov	r4, r0
 80a111e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1120:	b12e      	cbz	r6, 80a112e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1122:	4629      	mov	r1, r5
 80a1124:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a112a:	f7ff b89b 	b.w	80a0264 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a112e:	7c00      	ldrb	r0, [r0, #16]
 80a1130:	f7ff f8c8 	bl	80a02c4 <hal_usart_available_data_for_write>
 80a1134:	2800      	cmp	r0, #0
 80a1136:	dcf4      	bgt.n	80a1122 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1138:	4630      	mov	r0, r6
 80a113a:	bd70      	pop	{r4, r5, r6, pc}

080a113c <_ZN11USARTSerialD0Ev>:
 80a113c:	b510      	push	{r4, lr}
 80a113e:	4604      	mov	r4, r0
 80a1140:	2114      	movs	r1, #20
 80a1142:	f000 fa22 	bl	80a158a <_ZdlPvj>
 80a1146:	4620      	mov	r0, r4
 80a1148:	bd10      	pop	{r4, pc}
	...

080a114c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a114c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1150:	b510      	push	{r4, lr}
 80a1152:	4604      	mov	r4, r0
 80a1154:	4608      	mov	r0, r1
 80a1156:	4611      	mov	r1, r2
 80a1158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a115c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1160:	4a04      	ldr	r2, [pc, #16]	; (80a1174 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1162:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1164:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1166:	2201      	movs	r2, #1
 80a1168:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a116a:	461a      	mov	r2, r3
 80a116c:	f7ff f872 	bl	80a0254 <hal_usart_init>
}
 80a1170:	4620      	mov	r0, r4
 80a1172:	bd10      	pop	{r4, pc}
 80a1174:	080a1720 	.word	0x080a1720

080a1178 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a117a:	4c1a      	ldr	r4, [pc, #104]	; (80a11e4 <_Z22__fetch_global_Serial1v+0x6c>)
 80a117c:	6826      	ldr	r6, [r4, #0]
 80a117e:	b94e      	cbnz	r6, 80a1194 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a1180:	2084      	movs	r0, #132	; 0x84
 80a1182:	f7fe ff88 	bl	80a0096 <_Znwj>
 80a1186:	4605      	mov	r5, r0
 80a1188:	b118      	cbz	r0, 80a1192 <_Z22__fetch_global_Serial1v+0x1a>
 80a118a:	2284      	movs	r2, #132	; 0x84
 80a118c:	4631      	mov	r1, r6
 80a118e:	f000 fa1f 	bl	80a15d0 <memset>
 80a1192:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1194:	4d14      	ldr	r5, [pc, #80]	; (80a11e8 <_Z22__fetch_global_Serial1v+0x70>)
 80a1196:	682f      	ldr	r7, [r5, #0]
 80a1198:	b94f      	cbnz	r7, 80a11ae <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a119a:	2084      	movs	r0, #132	; 0x84
 80a119c:	f7fe ff7b 	bl	80a0096 <_Znwj>
 80a11a0:	4606      	mov	r6, r0
 80a11a2:	b118      	cbz	r0, 80a11ac <_Z22__fetch_global_Serial1v+0x34>
 80a11a4:	2284      	movs	r2, #132	; 0x84
 80a11a6:	4639      	mov	r1, r7
 80a11a8:	f000 fa12 	bl	80a15d0 <memset>
 80a11ac:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a11ae:	4f0f      	ldr	r7, [pc, #60]	; (80a11ec <_Z22__fetch_global_Serial1v+0x74>)
 80a11b0:	7839      	ldrb	r1, [r7, #0]
 80a11b2:	f3bf 8f5b 	dmb	ish
 80a11b6:	f011 0601 	ands.w	r6, r1, #1
 80a11ba:	d111      	bne.n	80a11e0 <_Z22__fetch_global_Serial1v+0x68>
 80a11bc:	4638      	mov	r0, r7
 80a11be:	f7fe ff70 	bl	80a00a2 <__cxa_guard_acquire>
 80a11c2:	b168      	cbz	r0, 80a11e0 <_Z22__fetch_global_Serial1v+0x68>
 80a11c4:	4631      	mov	r1, r6
 80a11c6:	6822      	ldr	r2, [r4, #0]
 80a11c8:	682b      	ldr	r3, [r5, #0]
 80a11ca:	4809      	ldr	r0, [pc, #36]	; (80a11f0 <_Z22__fetch_global_Serial1v+0x78>)
 80a11cc:	f7ff ffbe 	bl	80a114c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a11d0:	4638      	mov	r0, r7
 80a11d2:	f7fe ff6b 	bl	80a00ac <__cxa_guard_release>
 80a11d6:	4a07      	ldr	r2, [pc, #28]	; (80a11f4 <_Z22__fetch_global_Serial1v+0x7c>)
 80a11d8:	4907      	ldr	r1, [pc, #28]	; (80a11f8 <_Z22__fetch_global_Serial1v+0x80>)
 80a11da:	4805      	ldr	r0, [pc, #20]	; (80a11f0 <_Z22__fetch_global_Serial1v+0x78>)
 80a11dc:	f000 f9d0 	bl	80a1580 <__aeabi_atexit>
#endif
	return serial1;
}
 80a11e0:	4803      	ldr	r0, [pc, #12]	; (80a11f0 <_Z22__fetch_global_Serial1v+0x78>)
 80a11e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a11e4:	200000f0 	.word	0x200000f0
 80a11e8:	200000f4 	.word	0x200000f4
 80a11ec:	200000ec 	.word	0x200000ec
 80a11f0:	200000f8 	.word	0x200000f8
 80a11f4:	20000068 	.word	0x20000068
 80a11f8:	080a10d5 	.word	0x080a10d5

080a11fc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a11fc:	b510      	push	{r4, lr}
      if (_M_empty())
 80a11fe:	6883      	ldr	r3, [r0, #8]
 80a1200:	4604      	mov	r4, r0
 80a1202:	b90b      	cbnz	r3, 80a1208 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1204:	f000 f9c5 	bl	80a1592 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1208:	68c3      	ldr	r3, [r0, #12]
 80a120a:	4798      	blx	r3
      if (_M_manager)
 80a120c:	68a3      	ldr	r3, [r4, #8]
 80a120e:	b11b      	cbz	r3, 80a1218 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1210:	2203      	movs	r2, #3
 80a1212:	4621      	mov	r1, r4
 80a1214:	4620      	mov	r0, r4
 80a1216:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1218:	4620      	mov	r0, r4
}
 80a121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a121e:	2110      	movs	r1, #16
 80a1220:	f000 b9b3 	b.w	80a158a <_ZdlPvj>

080a1224 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1224:	4770      	bx	lr

080a1226 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1228:	4606      	mov	r6, r0
 80a122a:	4615      	mov	r5, r2
 80a122c:	460c      	mov	r4, r1
 80a122e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1230:	42bc      	cmp	r4, r7
 80a1232:	d006      	beq.n	80a1242 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1234:	6833      	ldr	r3, [r6, #0]
 80a1236:	4630      	mov	r0, r6
 80a1238:	689b      	ldr	r3, [r3, #8]
 80a123a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a123e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1240:	e7f6      	b.n	80a1230 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1242:	4628      	mov	r0, r5
 80a1244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1246 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1246:	2200      	movs	r2, #0
 80a1248:	7c00      	ldrb	r0, [r0, #16]
 80a124a:	f7ff b843 	b.w	80a02d4 <hal_i2c_write>

080a124e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a124e:	2100      	movs	r1, #0
 80a1250:	7c00      	ldrb	r0, [r0, #16]
 80a1252:	f7ff b847 	b.w	80a02e4 <hal_i2c_available>

080a1256 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1256:	2100      	movs	r1, #0
 80a1258:	7c00      	ldrb	r0, [r0, #16]
 80a125a:	f7ff b84b 	b.w	80a02f4 <hal_i2c_read>

080a125e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a125e:	2100      	movs	r1, #0
 80a1260:	7c00      	ldrb	r0, [r0, #16]
 80a1262:	f7ff b84f 	b.w	80a0304 <hal_i2c_peek>

080a1266 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1266:	2100      	movs	r1, #0
 80a1268:	7c00      	ldrb	r0, [r0, #16]
 80a126a:	f7ff b853 	b.w	80a0314 <hal_i2c_flush>

080a126e <_ZN7TwoWireD0Ev>:
 80a126e:	b510      	push	{r4, lr}
 80a1270:	4604      	mov	r4, r0
 80a1272:	2114      	movs	r1, #20
 80a1274:	f000 f989 	bl	80a158a <_ZdlPvj>
 80a1278:	4620      	mov	r0, r4
 80a127a:	bd10      	pop	{r4, pc}

080a127c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a127c:	b510      	push	{r4, lr}
 80a127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1282:	4604      	mov	r4, r0
 80a1284:	4608      	mov	r0, r1
 80a1286:	2100      	movs	r1, #0
 80a1288:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a128c:	4b03      	ldr	r3, [pc, #12]	; (80a129c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a128e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1290:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1292:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1294:	f7ff f84e 	bl	80a0334 <hal_i2c_init>
}
 80a1298:	4620      	mov	r0, r4
 80a129a:	bd10      	pop	{r4, pc}
 80a129c:	080a1750 	.word	0x080a1750

080a12a0 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a12a0:	2200      	movs	r2, #0
 80a12a2:	6840      	ldr	r0, [r0, #4]
 80a12a4:	4611      	mov	r1, r2
 80a12a6:	f7ff b8ed 	b.w	80a0484 <network_ready>

080a12aa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a12aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12ac:	4615      	mov	r5, r2
 80a12ae:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a12b0:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a12b2:	460e      	mov	r6, r1
 80a12b4:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a12b6:	2100      	movs	r1, #0
 80a12b8:	a803      	add	r0, sp, #12
 80a12ba:	f000 f989 	bl	80a15d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a12be:	4628      	mov	r0, r5
 80a12c0:	f000 f9cd 	bl	80a165e <strlen>
 80a12c4:	2700      	movs	r7, #0
 80a12c6:	b281      	uxth	r1, r0
 80a12c8:	6873      	ldr	r3, [r6, #4]
 80a12ca:	4628      	mov	r0, r5
 80a12cc:	9700      	str	r7, [sp, #0]
 80a12ce:	aa03      	add	r2, sp, #12
 80a12d0:	f7ff f87a 	bl	80a03c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12d4:	b130      	cbz	r0, 80a12e4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a12d6:	4639      	mov	r1, r7
 80a12d8:	4620      	mov	r0, r4
 80a12da:	f7ff fe29 	bl	80a0f30 <_ZN9IPAddressC1Em>
    }
 80a12de:	4620      	mov	r0, r4
 80a12e0:	b009      	add	sp, #36	; 0x24
 80a12e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	a903      	add	r1, sp, #12
 80a12e8:	f7ff fe10 	bl	80a0f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a12ec:	e7f7      	b.n	80a12de <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a12ee <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a12ee:	2200      	movs	r2, #0
 80a12f0:	6840      	ldr	r0, [r0, #4]
 80a12f2:	4611      	mov	r1, r2
 80a12f4:	f7ff b8e6 	b.w	80a04c4 <network_listening>

080a12f8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a12f8:	2200      	movs	r2, #0
 80a12fa:	6840      	ldr	r0, [r0, #4]
 80a12fc:	4611      	mov	r1, r2
 80a12fe:	f7ff b8f1 	b.w	80a04e4 <network_get_listen_timeout>

080a1302 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1302:	2200      	movs	r2, #0
 80a1304:	6840      	ldr	r0, [r0, #4]
 80a1306:	f7ff b8e5 	b.w	80a04d4 <network_set_listen_timeout>

080a130a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a130a:	2200      	movs	r2, #0
 80a130c:	6840      	ldr	r0, [r0, #4]
 80a130e:	f081 0101 	eor.w	r1, r1, #1
 80a1312:	f7ff b8cf 	b.w	80a04b4 <network_listen>

080a1316 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1316:	2300      	movs	r3, #0
 80a1318:	6840      	ldr	r0, [r0, #4]
 80a131a:	461a      	mov	r2, r3
 80a131c:	4619      	mov	r1, r3
 80a131e:	f7ff b8c1 	b.w	80a04a4 <network_off>

080a1322 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1322:	2200      	movs	r2, #0
 80a1324:	6840      	ldr	r0, [r0, #4]
 80a1326:	4611      	mov	r1, r2
 80a1328:	f7ff b89c 	b.w	80a0464 <network_connecting>

080a132c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a132c:	2200      	movs	r2, #0
 80a132e:	2102      	movs	r1, #2
 80a1330:	6840      	ldr	r0, [r0, #4]
 80a1332:	f7ff b89f 	b.w	80a0474 <network_disconnect>

080a1336 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1336:	2300      	movs	r3, #0
 80a1338:	6840      	ldr	r0, [r0, #4]
 80a133a:	461a      	mov	r2, r3
 80a133c:	f7ff b88a 	b.w	80a0454 <network_connect>

080a1340 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1340:	2204      	movs	r2, #4
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1344:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1346:	4a02      	ldr	r2, [pc, #8]	; (80a1350 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1348:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a134a:	4770      	bx	lr
 80a134c:	2000010c 	.word	0x2000010c
 80a1350:	080a1778 	.word	0x080a1778

080a1354 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1354:	2300      	movs	r3, #0
 80a1356:	6840      	ldr	r0, [r0, #4]
 80a1358:	461a      	mov	r2, r3
 80a135a:	f7ff b87b 	b.w	80a0454 <network_connect>

080a135e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a135e:	2200      	movs	r2, #0
 80a1360:	2102      	movs	r1, #2
 80a1362:	6840      	ldr	r0, [r0, #4]
 80a1364:	f7ff b886 	b.w	80a0474 <network_disconnect>

080a1368 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1368:	2200      	movs	r2, #0
 80a136a:	6840      	ldr	r0, [r0, #4]
 80a136c:	4611      	mov	r1, r2
 80a136e:	f7ff b879 	b.w	80a0464 <network_connecting>

080a1372 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1372:	2200      	movs	r2, #0
 80a1374:	6840      	ldr	r0, [r0, #4]
 80a1376:	4611      	mov	r1, r2
 80a1378:	f7ff b884 	b.w	80a0484 <network_ready>

080a137c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a137c:	2300      	movs	r3, #0
 80a137e:	6840      	ldr	r0, [r0, #4]
 80a1380:	461a      	mov	r2, r3
 80a1382:	4619      	mov	r1, r3
 80a1384:	f7ff b886 	b.w	80a0494 <network_on>

080a1388 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1388:	2300      	movs	r3, #0
 80a138a:	6840      	ldr	r0, [r0, #4]
 80a138c:	461a      	mov	r2, r3
 80a138e:	4619      	mov	r1, r3
 80a1390:	f7ff b888 	b.w	80a04a4 <network_off>

080a1394 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1394:	2200      	movs	r2, #0
 80a1396:	6840      	ldr	r0, [r0, #4]
 80a1398:	f081 0101 	eor.w	r1, r1, #1
 80a139c:	f7ff b88a 	b.w	80a04b4 <network_listen>

080a13a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a13a0:	2200      	movs	r2, #0
 80a13a2:	6840      	ldr	r0, [r0, #4]
 80a13a4:	f7ff b896 	b.w	80a04d4 <network_set_listen_timeout>

080a13a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a13a8:	2200      	movs	r2, #0
 80a13aa:	6840      	ldr	r0, [r0, #4]
 80a13ac:	4611      	mov	r1, r2
 80a13ae:	f7ff b899 	b.w	80a04e4 <network_get_listen_timeout>

080a13b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a13b2:	2200      	movs	r2, #0
 80a13b4:	6840      	ldr	r0, [r0, #4]
 80a13b6:	4611      	mov	r1, r2
 80a13b8:	f7ff b884 	b.w	80a04c4 <network_listening>

080a13bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a13bc:	b570      	push	{r4, r5, r6, lr}
 80a13be:	4615      	mov	r5, r2
 80a13c0:	b08e      	sub	sp, #56	; 0x38
 80a13c2:	4604      	mov	r4, r0
    IPAddress addr;
 80a13c4:	a808      	add	r0, sp, #32
 80a13c6:	f7ff fd93 	bl	80a0ef0 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a13ca:	2211      	movs	r2, #17
 80a13cc:	2100      	movs	r1, #0
 80a13ce:	a803      	add	r0, sp, #12
 80a13d0:	f000 f8fe 	bl	80a15d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13d4:	2600      	movs	r6, #0
 80a13d6:	4628      	mov	r0, r5
 80a13d8:	f000 f941 	bl	80a165e <strlen>
 80a13dc:	4b0a      	ldr	r3, [pc, #40]	; (80a1408 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a13de:	9600      	str	r6, [sp, #0]
 80a13e0:	b281      	uxth	r1, r0
 80a13e2:	685b      	ldr	r3, [r3, #4]
 80a13e4:	4628      	mov	r0, r5
 80a13e6:	aa03      	add	r2, sp, #12
 80a13e8:	f7fe ffee 	bl	80a03c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13ec:	b130      	cbz	r0, 80a13fc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a13ee:	4631      	mov	r1, r6
 80a13f0:	4620      	mov	r0, r4
 80a13f2:	f7ff fd9d 	bl	80a0f30 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a13f6:	4620      	mov	r0, r4
 80a13f8:	b00e      	add	sp, #56	; 0x38
 80a13fa:	bd70      	pop	{r4, r5, r6, pc}
 80a13fc:	4620      	mov	r0, r4
 80a13fe:	a903      	add	r1, sp, #12
 80a1400:	f7ff fd84 	bl	80a0f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1404:	e7f7      	b.n	80a13f6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1406:	bf00      	nop
 80a1408:	2000010c 	.word	0x2000010c

080a140c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a140c:	4b02      	ldr	r3, [pc, #8]	; (80a1418 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a140e:	4a03      	ldr	r2, [pc, #12]	; (80a141c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1410:	601a      	str	r2, [r3, #0]
 80a1412:	2200      	movs	r2, #0
 80a1414:	605a      	str	r2, [r3, #4]

} // spark
 80a1416:	4770      	bx	lr
 80a1418:	20000114 	.word	0x20000114
 80a141c:	080a17ac 	.word	0x080a17ac

080a1420 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1420:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1422:	b570      	push	{r4, r5, r6, lr}
 80a1424:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1426:	d901      	bls.n	80a142c <pinAvailable+0xc>
    return false;
 80a1428:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a142a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a142c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1430:	2b02      	cmp	r3, #2
 80a1432:	d90b      	bls.n	80a144c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1434:	2801      	cmp	r0, #1
 80a1436:	d826      	bhi.n	80a1486 <pinAvailable+0x66>
 80a1438:	f000 f87a 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a143c:	2100      	movs	r1, #0
 80a143e:	7c00      	ldrb	r0, [r0, #16]
 80a1440:	f7fe ff70 	bl	80a0324 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1444:	f080 0001 	eor.w	r0, r0, #1
 80a1448:	b2c0      	uxtb	r0, r0
 80a144a:	e7ee      	b.n	80a142a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a144c:	4e13      	ldr	r6, [pc, #76]	; (80a149c <pinAvailable+0x7c>)
 80a144e:	7831      	ldrb	r1, [r6, #0]
 80a1450:	f3bf 8f5b 	dmb	ish
 80a1454:	f011 0501 	ands.w	r5, r1, #1
 80a1458:	d10f      	bne.n	80a147a <pinAvailable+0x5a>
 80a145a:	4630      	mov	r0, r6
 80a145c:	f7fe fe21 	bl	80a00a2 <__cxa_guard_acquire>
 80a1460:	b158      	cbz	r0, 80a147a <pinAvailable+0x5a>
 80a1462:	4629      	mov	r1, r5
 80a1464:	480e      	ldr	r0, [pc, #56]	; (80a14a0 <pinAvailable+0x80>)
 80a1466:	f7ff f885 	bl	80a0574 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a146a:	4630      	mov	r0, r6
 80a146c:	f7fe fe1e 	bl	80a00ac <__cxa_guard_release>
 80a1470:	4a0c      	ldr	r2, [pc, #48]	; (80a14a4 <pinAvailable+0x84>)
 80a1472:	490d      	ldr	r1, [pc, #52]	; (80a14a8 <pinAvailable+0x88>)
 80a1474:	480a      	ldr	r0, [pc, #40]	; (80a14a0 <pinAvailable+0x80>)
 80a1476:	f000 f883 	bl	80a1580 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a147a:	4b09      	ldr	r3, [pc, #36]	; (80a14a0 <pinAvailable+0x80>)
 80a147c:	7818      	ldrb	r0, [r3, #0]
 80a147e:	f7fe ff6b 	bl	80a0358 <hal_spi_is_enabled>
 80a1482:	2800      	cmp	r0, #0
 80a1484:	d1d0      	bne.n	80a1428 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1486:	3c12      	subs	r4, #18
 80a1488:	2c01      	cmp	r4, #1
 80a148a:	d805      	bhi.n	80a1498 <pinAvailable+0x78>
 80a148c:	f7ff fe74 	bl	80a1178 <_Z22__fetch_global_Serial1v>
 80a1490:	7c00      	ldrb	r0, [r0, #16]
 80a1492:	f7fe ff0f 	bl	80a02b4 <hal_usart_is_enabled>
 80a1496:	e7d5      	b.n	80a1444 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1498:	2001      	movs	r0, #1
 80a149a:	e7c6      	b.n	80a142a <pinAvailable+0xa>
 80a149c:	2000007c 	.word	0x2000007c
 80a14a0:	20000080 	.word	0x20000080
 80a14a4:	20000068 	.word	0x20000068
 80a14a8:	080a01e5 	.word	0x080a01e5

080a14ac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14ac:	2817      	cmp	r0, #23
{
 80a14ae:	b538      	push	{r3, r4, r5, lr}
 80a14b0:	4604      	mov	r4, r0
 80a14b2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14b4:	d80a      	bhi.n	80a14cc <pinMode+0x20>
 80a14b6:	29ff      	cmp	r1, #255	; 0xff
 80a14b8:	d008      	beq.n	80a14cc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a14ba:	f7ff ffb1 	bl	80a1420 <pinAvailable>
 80a14be:	b128      	cbz	r0, 80a14cc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a14c0:	4629      	mov	r1, r5
 80a14c2:	4620      	mov	r0, r4
}
 80a14c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a14c8:	f7fe be94 	b.w	80a01f4 <HAL_Pin_Mode>
}
 80a14cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a14d0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a14d0:	2300      	movs	r3, #0
 80a14d2:	b513      	push	{r0, r1, r4, lr}
 80a14d4:	4c07      	ldr	r4, [pc, #28]	; (80a14f4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a14d6:	461a      	mov	r2, r3
 80a14d8:	4619      	mov	r1, r3
 80a14da:	4620      	mov	r0, r4
 80a14dc:	9300      	str	r3, [sp, #0]
 80a14de:	f7ff fd3d 	bl	80a0f5c <_ZN9IPAddressC1Ehhhh>
 80a14e2:	4620      	mov	r0, r4
 80a14e4:	4a04      	ldr	r2, [pc, #16]	; (80a14f8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a14e6:	4905      	ldr	r1, [pc, #20]	; (80a14fc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a14e8:	b002      	add	sp, #8
 80a14ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14ee:	f000 b847 	b.w	80a1580 <__aeabi_atexit>
 80a14f2:	bf00      	nop
 80a14f4:	20000120 	.word	0x20000120
 80a14f8:	20000068 	.word	0x20000068
 80a14fc:	080a0ead 	.word	0x080a0ead

080a1500 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1500:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a1502:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1504:	2520      	movs	r5, #32
 80a1506:	8043      	strh	r3, [r0, #2]
 80a1508:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a150a:	4e08      	ldr	r6, [pc, #32]	; (80a152c <_Z17acquireWireBufferv+0x2c>)
{
 80a150c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a150e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1510:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1512:	6085      	str	r5, [r0, #8]
 80a1514:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1516:	4628      	mov	r0, r5
 80a1518:	f000 f839 	bl	80a158e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a151c:	4631      	mov	r1, r6
	};
 80a151e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1520:	4628      	mov	r0, r5
 80a1522:	f000 f834 	bl	80a158e <_ZnajRKSt9nothrow_t>
	};
 80a1526:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a1528:	4620      	mov	r0, r4
 80a152a:	bd70      	pop	{r4, r5, r6, pc}
 80a152c:	080a17d8 	.word	0x080a17d8

080a1530 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1530:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1532:	4d0f      	ldr	r5, [pc, #60]	; (80a1570 <_Z19__fetch_global_Wirev+0x40>)
{
 80a1534:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1536:	7829      	ldrb	r1, [r5, #0]
 80a1538:	f3bf 8f5b 	dmb	ish
 80a153c:	f011 0401 	ands.w	r4, r1, #1
 80a1540:	d113      	bne.n	80a156a <_Z19__fetch_global_Wirev+0x3a>
 80a1542:	4628      	mov	r0, r5
 80a1544:	f7fe fdad 	bl	80a00a2 <__cxa_guard_acquire>
 80a1548:	b178      	cbz	r0, 80a156a <_Z19__fetch_global_Wirev+0x3a>
 80a154a:	a801      	add	r0, sp, #4
 80a154c:	f7ff ffd8 	bl	80a1500 <_Z17acquireWireBufferv>
 80a1550:	4621      	mov	r1, r4
 80a1552:	aa01      	add	r2, sp, #4
 80a1554:	4807      	ldr	r0, [pc, #28]	; (80a1574 <_Z19__fetch_global_Wirev+0x44>)
 80a1556:	f7ff fe91 	bl	80a127c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a155a:	4628      	mov	r0, r5
 80a155c:	f7fe fda6 	bl	80a00ac <__cxa_guard_release>
 80a1560:	4a05      	ldr	r2, [pc, #20]	; (80a1578 <_Z19__fetch_global_Wirev+0x48>)
 80a1562:	4906      	ldr	r1, [pc, #24]	; (80a157c <_Z19__fetch_global_Wirev+0x4c>)
 80a1564:	4803      	ldr	r0, [pc, #12]	; (80a1574 <_Z19__fetch_global_Wirev+0x44>)
 80a1566:	f000 f80b 	bl	80a1580 <__aeabi_atexit>
	return wire;
}
 80a156a:	4802      	ldr	r0, [pc, #8]	; (80a1574 <_Z19__fetch_global_Wirev+0x44>)
 80a156c:	b007      	add	sp, #28
 80a156e:	bd30      	pop	{r4, r5, pc}
 80a1570:	20000138 	.word	0x20000138
 80a1574:	2000013c 	.word	0x2000013c
 80a1578:	20000068 	.word	0x20000068
 80a157c:	080a1225 	.word	0x080a1225

080a1580 <__aeabi_atexit>:
 80a1580:	460b      	mov	r3, r1
 80a1582:	4601      	mov	r1, r0
 80a1584:	4618      	mov	r0, r3
 80a1586:	f000 b807 	b.w	80a1598 <__cxa_atexit>

080a158a <_ZdlPvj>:
 80a158a:	f7fe bd88 	b.w	80a009e <_ZdlPv>

080a158e <_ZnajRKSt9nothrow_t>:
 80a158e:	f7fe bd84 	b.w	80a009a <_Znaj>

080a1592 <_ZSt25__throw_bad_function_callv>:
 80a1592:	b508      	push	{r3, lr}
 80a1594:	f7fe ffd6 	bl	80a0544 <abort>

080a1598 <__cxa_atexit>:
 80a1598:	b510      	push	{r4, lr}
 80a159a:	4604      	mov	r4, r0
 80a159c:	4804      	ldr	r0, [pc, #16]	; (80a15b0 <__cxa_atexit+0x18>)
 80a159e:	4613      	mov	r3, r2
 80a15a0:	b120      	cbz	r0, 80a15ac <__cxa_atexit+0x14>
 80a15a2:	460a      	mov	r2, r1
 80a15a4:	2002      	movs	r0, #2
 80a15a6:	4621      	mov	r1, r4
 80a15a8:	f3af 8000 	nop.w
 80a15ac:	bd10      	pop	{r4, pc}
 80a15ae:	bf00      	nop
 80a15b0:	00000000 	.word	0x00000000

080a15b4 <memcpy>:
 80a15b4:	440a      	add	r2, r1
 80a15b6:	4291      	cmp	r1, r2
 80a15b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80a15bc:	d100      	bne.n	80a15c0 <memcpy+0xc>
 80a15be:	4770      	bx	lr
 80a15c0:	b510      	push	{r4, lr}
 80a15c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a15c6:	4291      	cmp	r1, r2
 80a15c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a15cc:	d1f9      	bne.n	80a15c2 <memcpy+0xe>
 80a15ce:	bd10      	pop	{r4, pc}

080a15d0 <memset>:
 80a15d0:	4603      	mov	r3, r0
 80a15d2:	4402      	add	r2, r0
 80a15d4:	4293      	cmp	r3, r2
 80a15d6:	d100      	bne.n	80a15da <memset+0xa>
 80a15d8:	4770      	bx	lr
 80a15da:	f803 1b01 	strb.w	r1, [r3], #1
 80a15de:	e7f9      	b.n	80a15d4 <memset+0x4>

080a15e0 <srand>:
 80a15e0:	b538      	push	{r3, r4, r5, lr}
 80a15e2:	4b0d      	ldr	r3, [pc, #52]	; (80a1618 <srand+0x38>)
 80a15e4:	4604      	mov	r4, r0
 80a15e6:	681d      	ldr	r5, [r3, #0]
 80a15e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a15ea:	b97b      	cbnz	r3, 80a160c <srand+0x2c>
 80a15ec:	2018      	movs	r0, #24
 80a15ee:	f7fe ff99 	bl	80a0524 <malloc>
 80a15f2:	4a0a      	ldr	r2, [pc, #40]	; (80a161c <srand+0x3c>)
 80a15f4:	4b0a      	ldr	r3, [pc, #40]	; (80a1620 <srand+0x40>)
 80a15f6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a15f8:	e9c0 2300 	strd	r2, r3, [r0]
 80a15fc:	4b09      	ldr	r3, [pc, #36]	; (80a1624 <srand+0x44>)
 80a15fe:	2201      	movs	r2, #1
 80a1600:	6083      	str	r3, [r0, #8]
 80a1602:	230b      	movs	r3, #11
 80a1604:	8183      	strh	r3, [r0, #12]
 80a1606:	2300      	movs	r3, #0
 80a1608:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a160c:	2200      	movs	r2, #0
 80a160e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1610:	611c      	str	r4, [r3, #16]
 80a1612:	615a      	str	r2, [r3, #20]
 80a1614:	bd38      	pop	{r3, r4, r5, pc}
 80a1616:	bf00      	nop
 80a1618:	20000004 	.word	0x20000004
 80a161c:	abcd330e 	.word	0xabcd330e
 80a1620:	e66d1234 	.word	0xe66d1234
 80a1624:	0005deec 	.word	0x0005deec

080a1628 <strdup>:
 80a1628:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <strdup+0xc>)
 80a162a:	4601      	mov	r1, r0
 80a162c:	6818      	ldr	r0, [r3, #0]
 80a162e:	f000 b803 	b.w	80a1638 <_strdup_r>
 80a1632:	bf00      	nop
 80a1634:	20000004 	.word	0x20000004

080a1638 <_strdup_r>:
 80a1638:	b570      	push	{r4, r5, r6, lr}
 80a163a:	4604      	mov	r4, r0
 80a163c:	4608      	mov	r0, r1
 80a163e:	460d      	mov	r5, r1
 80a1640:	f000 f80d 	bl	80a165e <strlen>
 80a1644:	1c46      	adds	r6, r0, #1
 80a1646:	4631      	mov	r1, r6
 80a1648:	4620      	mov	r0, r4
 80a164a:	f7fe ff83 	bl	80a0554 <_malloc_r>
 80a164e:	4604      	mov	r4, r0
 80a1650:	b118      	cbz	r0, 80a165a <_strdup_r+0x22>
 80a1652:	4632      	mov	r2, r6
 80a1654:	4629      	mov	r1, r5
 80a1656:	f7ff ffad 	bl	80a15b4 <memcpy>
 80a165a:	4620      	mov	r0, r4
 80a165c:	bd70      	pop	{r4, r5, r6, pc}

080a165e <strlen>:
 80a165e:	4603      	mov	r3, r0
 80a1660:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1664:	2a00      	cmp	r2, #0
 80a1666:	d1fb      	bne.n	80a1660 <strlen+0x2>
 80a1668:	1a18      	subs	r0, r3, r0
 80a166a:	3801      	subs	r0, #1
 80a166c:	4770      	bx	lr

080a166e <link_code_end>:
	...

080a1670 <dynalib_user>:
 80a1670:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1680:	0000 0000 7453 7461 0065 6c53 6565 0070     ....State.Sleep.
 80a1690:	4e4f 4f00 4646 6100 7070 2500 2d59 6d25     ON.OFF.app.%Y-%m
 80a16a0:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
 80a16b0:	6373 6974 656d 0000                         sctime..

080a16b8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a16c0:	0975 080a 097b 080a 09b9 080a 0989 080a     u...{...........
 80a16d0:	0977 080a                                   w...

080a16d4 <_ZTV9IPAddress>:
	...
 80a16dc:	0ebd 080a 0ead 080a 0eaf 080a               ............

080a16e8 <_ZTV9USBSerial>:
	...
 80a16f0:	0f79 080a 0fdf 080a 0fb7 080a 06f9 080a     y...............
 80a1700:	0fa9 080a 0f7b 080a 0f8b 080a 0fd9 080a     ....{...........
 80a1710:	0f9b 080a 0f75 080a                         ....u...

080a1718 <_ZTV11USARTSerial>:
	...
 80a1720:	10d5 080a 113d 080a 1119 080a 06f9 080a     ....=...........
 80a1730:	10e9 080a 1105 080a 10f7 080a 1113 080a     ................
 80a1740:	10d7 080a 10db 080a                         ........

080a1748 <_ZTV7TwoWire>:
	...
 80a1750:	1225 080a 126f 080a 1247 080a 1227 080a     %...o...G...'...
 80a1760:	124f 080a 1257 080a 125f 080a 1267 080a     O...W..._...g...

080a1770 <_ZTVN5spark9WiFiClassE>:
	...
 80a1778:	1337 080a 132d 080a 1323 080a 12a1 080a     7...-...#.......
 80a1788:	0785 080a 1317 080a 130b 080a 1303 080a     ................
 80a1798:	12f9 080a 12ef 080a 12ab 080a               ............

080a17a4 <_ZTVN5spark12NetworkClassE>:
	...
 80a17ac:	1355 080a 135f 080a 1369 080a 1373 080a     U..._...i...s...
 80a17bc:	137d 080a 1389 080a 1395 080a 13a1 080a     }...............
 80a17cc:	13a9 080a 13b3 080a 13bd 080a               ............

080a17d8 <_ZSt7nothrow>:
 80a17d8:	0000 0000                                   ....

080a17dc <__sf_fake_stderr>:
	...

080a17fc <__sf_fake_stdin>:
	...

080a181c <__sf_fake_stdout>:
	...

080a183c <link_const_variable_data_end>:
 80a183c:	080a01cd 	.word	0x080a01cd
 80a1840:	080a06bd 	.word	0x080a06bd
 80a1844:	080a07a1 	.word	0x080a07a1
 80a1848:	080a07b1 	.word	0x080a07b1
 80a184c:	080a080d 	.word	0x080a080d
 80a1850:	080a1341 	.word	0x080a1341
 80a1854:	080a140d 	.word	0x080a140d
 80a1858:	080a14d1 	.word	0x080a14d1

080a185c <link_constructors_end>:
 80a185c:	00000000 	.word	0x00000000
